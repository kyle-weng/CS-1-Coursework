import random as r
import traceback as tb
import locset as ls
import dissembler_rep as dr
import utils as u
import string

NTESTS = 100

# ---------------------------------------------------------------------- 
# Test framework.
# ---------------------------------------------------------------------- 

# Global variables.
ntests = 0
test_failures = 0
test_successes = 0

def reset_test_counts():
    '''
    Reset the test counter variables to 0.
    '''

    global ntests, test_failures, test_successes
    ntests = 0
    test_failures = 0
    test_successes = 0

def run_test(testfunc):
    '''
    Run a test.  Catch and display any tracebacks.
    Update test statistics.

    Arguments:
      testfunc -- the test function

    Return value: none

    Side effects:
      The global variables 'ntests', 'test_failures', and 'test_successes'
      may be updated.
    '''

    global ntests, test_failures, test_successes
    print('{} ... '.format(testfunc.__name__), end='')
    ntests += 1
    try:
        testfunc()
    except AssertionError as e:
        traceback_str = ''.join(tb.format_tb(e.__traceback__))
        print()
        print('-' * 70)
        print(traceback_str.strip())
        print('-' * 70)
        test_failures += 1
        print('test failed\n')
        return
    test_successes += 1
    print('passed')

def wrap_up():
    '''Print overall test results.'''
    print(f'Number of tests:  {ntests:4}')
    print(f'Tests passed:     {test_successes:4}')
    print(f'Tests failed:     {test_failures:4}')
    print()

def lists_equal(lst1, lst2):
    '''
    Return True if `lst1` and `lst2` have the same length and contain
    the same elements.  The order of the elements in the list doesn't
    matter.  This assumes that all list elements are distinct.
    '''

    if len(lst1) != len(lst2):
        return False
    for item in lst1:
        if item not in lst2:
            return False
    for item in lst2:
        if item not in lst1:
            return False
    return True

# ---------------------------------------------------------------------- 
# Generators.
# ---------------------------------------------------------------------- 

def make_random_loc(nrows, ncols):
    ''' Create a random loc. '''
    row = r.randrange(nrows)
    col = r.randrange(ncols)
    return (row, col)

def make_random_adjacent_locs(rep):
    '''
    Return a pair of adjacent locs in the keys of rep `rep`.
    Try 100 times.  If it doesn't work, fail.
    '''

    keys = list(rep.keys())
    for _ in range(100):
        (l1, l2) = r.sample(keys, 2)
        if ls.is_adjacent(l1, l2):
            return ((l1, l2))
    return None

def make_random_locset(nlocs, nrows, ncols):
    ''' Create a random locset. '''
    locs = set()
    while len(locs) < nlocs:
        locs.add(make_random_loc(nrows, ncols))
    return locs

def make_random_dict1(nlocs, nrows, ncols, labels):
    '''
    Create a random dictionary mapping locs to one-character labels.
    '''
    d = {}
    for _ in range(nlocs):
        l = make_random_loc(nrows, ncols)
        d[l] = r.choice(labels)
    assert u.is_rep(d)  # sanity check
    return d

def make_random_dict2(nlocs, nrows, ncols, labels):
    '''
    Create a random dictionary mapping one-character labels to 
    (mutually disjoint) sets of locs.
    '''

    d = {}
    locs = make_random_locset(nlocs, nrows, ncols)
    for l in locs:
        c = r.choice(labels)
        if c in d:
            d[c].add(l)
        else:
            d[c] = set([l])
    assert u.is_inverted_rep(d)  # sanity check
    return d

# ---------------------------------------------------------------------- 
# Tests.
# ---------------------------------------------------------------------- 

def test_invert_rep():
    # The input to `invert_rep` is a dictionary mapping locs to letters.
    # Test invariants:
    # 1) Calling `invert_rep` doesn't change the input dictionary.
    # 2) The output is an inverted dictionary (mapping letters to sets of locs).
    # 3) The set of values in the input dictionary equals the set of
    #    keys in the output dictionary.
    # 4) The union of the values in the output dictionary equals the
    #    set of keys in the input dictionary.
    nrows = 5
    ncols = 4
    for _ in range(NTESTS):
        nlocs = r.randrange(7, 15)
        nlabels = r.randrange(3, 7)
        labels = string.ascii_lowercase[:nlabels]
        d = make_random_dict1(nlocs, nrows, ncols, labels)
        d_copy = d.copy()
        di = dr.invert_rep(d)
        # 1.
        assert d == d_copy
        # 2.
        assert u.is_inverted_rep(di)
        # 3.
        assert set(d.values()) == set(di.keys())
        # 4.
        outvals = list(di.values())
        all_outvals = set().union(*outvals)
        assert set(d.keys()) == all_outvals

    # Generated tests:
    assert dr.invert_rep({(0, 1): 'b', (1, 1): 'b', (4, 3): 'b', (4, 2): 'a', (3, 0): 'b'}) == {'b': {(0, 1), (3, 0), (1, 1), (4, 3)}, 'a': {(4, 2)}}
    assert dr.invert_rep({(0, 2): 'a', (2, 3): 'd', (3, 0): 'b', (2, 0): 'd', (2, 2): 'a', (1, 3): 'd'}) == {'a': {(0, 2), (2, 2)}, 'd': {(2, 0), (1, 3), (2, 3)}, 'b': {(3, 0)}}
    assert dr.invert_rep({(3, 2): 'e', (2, 0): 'e', (2, 1): 'e', (4, 1): 'c', (4, 3): 'b', (4, 2): 'd'}) == {'e': {(2, 0), (3, 2), (2, 1)}, 'c': {(4, 1)}, 'b': {(4, 3)}, 'd': {(4, 2)}}
    assert dr.invert_rep({(0, 0): 'd', (0, 1): 'a', (4, 3): 'c', (2, 1): 'd', (3, 0): 'c', (2, 3): 'd'}) == {'d': {(0, 0), (2, 3), (2, 1)}, 'a': {(0, 1)}, 'c': {(3, 0), (4, 3)}}
    assert dr.invert_rep({(4, 1): 'a', (4, 0): 'b', (3, 3): 'a', (0, 0): 'b', (2, 2): 'a', (1, 3): 'a'}) == {'a': {(1, 3), (4, 1), (3, 3), (2, 2)}, 'b': {(0, 0), (4, 0)}}
    assert dr.invert_rep({(3, 3): 'd', (3, 1): 'd', (3, 2): 'd', (4, 0): 'c', (4, 1): 'b', (4, 3): 'e'}) == {'d': {(3, 2), (3, 1), (3, 3)}, 'c': {(4, 0)}, 'b': {(4, 1)}, 'e': {(4, 3)}}
    assert dr.invert_rep({(2, 2): 'c', (1, 1): 'a', (4, 2): 'c', (2, 1): 'b', (0, 3): 'b', (0, 2): 'a', (4, 1): 'a'}) == {'c': {(4, 2), (2, 2)}, 'a': {(0, 2), (4, 1), (1, 1)}, 'b': {(0, 3), (2, 1)}}
    assert dr.invert_rep({(0, 2): 'a', (0, 1): 'a', (2, 3): 'c', (0, 3): 'e', (3, 3): 'b', (3, 1): 'e', (4, 1): 'd'}) == {'a': {(0, 1), (0, 2)}, 'c': {(2, 3)}, 'e': {(0, 3), (3, 1)}, 'b': {(3, 3)}, 'd': {(4, 1)}}
    assert dr.invert_rep({(2, 2): 'a', (1, 1): 'c', (1, 3): 'b', (3, 2): 'a', (4, 2): 'a', (0, 3): 'b', (3, 3): 'b'}) == {'a': {(4, 2), (3, 2), (2, 2)}, 'c': {(1, 1)}, 'b': {(0, 3), (1, 3), (3, 3)}}
    assert dr.invert_rep({(3, 2): 'b', (1, 1): 'c', (4, 0): 'c', (2, 3): 'c', (3, 0): 'b', (1, 0): 'b', (2, 0): 'a', (0, 0): 'd'}) == {'b': {(3, 0), (1, 0), (3, 2)}, 'c': {(2, 3), (1, 1), (4, 0)}, 'a': {(2, 0)}, 'd': {(0, 0)}}
    assert dr.invert_rep({(0, 3): 'c', (4, 2): 'c', (0, 1): 'c', (1, 1): 'a', (1, 2): 'b', (0, 0): 'a', (2, 1): 'd', (3, 3): 'd'}) == {'c': {(0, 1), (4, 2), (0, 3)}, 'a': {(0, 0), (1, 1)}, 'b': {(1, 2)}, 'd': {(3, 3), (2, 1)}}
    assert dr.invert_rep({(4, 1): 'b', (4, 0): 'c', (2, 3): 'a', (3, 1): 'b', (4, 3): 'a', (2, 1): 'c', (1, 1): 'c', (0, 0): 'a'}) == {'b': {(3, 1), (4, 1)}, 'c': {(1, 1), (2, 1), (4, 0)}, 'a': {(0, 0), (2, 3), (4, 3)}}
    assert dr.invert_rep({(1, 2): 'a', (1, 3): 'e', (1, 1): 'e', (0, 2): 'c', (2, 1): 'd', (4, 2): 'a', (3, 3): 'd', (2, 3): 'b', (3, 1): 'c'}) == {'a': {(1, 2), (4, 2)}, 'e': {(1, 3), (1, 1)}, 'c': {(3, 1), (0, 2)}, 'd': {(3, 3), (2, 1)}, 'b': {(2, 3)}}
    assert dr.invert_rep({(1, 2): 'a', (4, 1): 'd', (2, 2): 'c', (1, 3): 'e', (2, 0): 'a', (3, 2): 'f', (1, 0): 'c', (4, 2): 'a', (4, 3): 'b', (0, 1): 'd'}) == {'a': {(1, 2), (2, 0), (4, 2)}, 'd': {(0, 1), (4, 1)}, 'c': {(1, 0), (2, 2)}, 'e': {(1, 3)}, 'f': {(3, 2)}, 'b': {(4, 3)}}
    assert dr.invert_rep({(0, 0): 'b', (2, 1): 'c', (4, 0): 'c', (0, 2): 'b', (2, 0): 'a', (3, 1): 'c', (2, 2): 'c', (4, 3): 'b', (1, 1): 'b', (3, 3): 'b'}) == {'b': {(0, 0), (3, 3), (1, 1), (4, 3), (0, 2)}, 'c': {(2, 2), (3, 1), (2, 1), (4, 0)}, 'a': {(2, 0)}}
    assert dr.invert_rep({(3, 2): 'e', (2, 0): 'a', (1, 1): 'c', (0, 1): 'e', (4, 0): 'c', (0, 2): 'd', (4, 3): 'a', (0, 0): 'd', (1, 3): 'b', (2, 3): 'a'}) == {'e': {(0, 1), (3, 2)}, 'a': {(2, 0), (2, 3), (4, 3)}, 'c': {(1, 1), (4, 0)}, 'd': {(0, 0), (0, 2)}, 'b': {(1, 3)}}
    assert dr.invert_rep({(0, 2): 'c', (4, 1): 'f', (2, 3): 'f', (2, 0): 'e', (1, 3): 'a', (3, 1): 'e', (0, 0): 'e', (2, 1): 'c', (3, 2): 'e', (4, 0): 'f', (1, 1): 'c'}) == {'c': {(1, 1), (0, 2), (2, 1)}, 'f': {(4, 1), (4, 0), (2, 3)}, 'e': {(2, 0), (3, 2), (3, 1), (0, 0)}, 'a': {(1, 3)}}
    assert dr.invert_rep({(3, 0): 'b', (3, 3): 'e', (0, 3): 'e', (1, 3): 'a', (2, 2): 'e', (4, 3): 'a', (1, 0): 'c', (3, 2): 'c', (2, 0): 'e', (1, 2): 'f', (2, 1): 'e'}) == {'b': {(3, 0)}, 'e': {(3, 3), (2, 1), (2, 0), (2, 2), (0, 3)}, 'a': {(1, 3), (4, 3)}, 'c': {(1, 0), (3, 2)}, 'f': {(1, 2)}}
    assert dr.invert_rep({(1, 2): 'e', (0, 0): 'd', (4, 2): 'd', (3, 1): 'e', (1, 3): 'c', (4, 3): 'a', (1, 0): 'd', (0, 2): 'b', (0, 3): 'c', (3, 2): 'b', (2, 1): 'c', (2, 3): 'a'}) == {'e': {(1, 2), (3, 1)}, 'd': {(4, 2), (1, 0), (0, 0)}, 'c': {(0, 3), (1, 3), (2, 1)}, 'a': {(2, 3), (4, 3)}, 'b': {(3, 2), (0, 2)}}
    assert dr.invert_rep({(4, 3): 'b', (2, 2): 'c', (3, 0): 'b', (0, 0): 'a', (4, 1): 'c', (3, 1): 'b', (0, 3): 'b', (1, 0): 'a', (0, 2): 'a', (0, 1): 'a', (3, 2): 'c', (4, 0): 'c'}) == {'b': {(3, 0), (0, 3), (3, 1), (4, 3)}, 'c': {(3, 2), (4, 1), (4, 0), (2, 2)}, 'a': {(0, 1), (1, 0), (0, 0), (0, 2)}}
    assert dr.invert_rep({(4, 3): 'b', (2, 2): 'c', (3, 0): 'b', (0, 0): 'a', (4, 1): 'c', (3, 1): 'b', (0, 3): 'b', (1, 0): 'a', (0, 2): 'a', (0, 1): 'a', (3, 2): 'c', (4, 0): 'c'}) == {'b': {(3, 0), (0, 3), (3, 1), (4, 3)}, 'c': {(3, 2), (4, 1), (4, 0), (2, 2)}, 'a': {(0, 1), (1, 0), (0, 0), (0, 2)}}

def test_revert_rep():
    # The input to `revert_rep` is a dictionary mapping letters to
    #   sets of locs.
    # Test invariants:
    # 1) Calling `revert_rep` doesn't change the input dictionary.
    # 2) The output is a dictionary mapping locs to letters.
    # 3) The set of keys in the input dictionary equals the set of
    #    values in the output dictionary.
    # 4) The set of the keys in the output dictionary equals the
    #    union of the values in the input dictionary.
    nrows = 5
    ncols = 4
    for _ in range(NTESTS):
        nlocs = r.randrange(7, 15)
        nlabels = r.randrange(3, 7)
        labels = string.ascii_lowercase[:nlabels]
        d = make_random_dict2(nlocs, nrows, ncols, labels)
        d_copy = d.copy()
        drev = dr.revert_rep(d)
        # 1.
        assert d == d_copy
        # 2.
        assert u.is_rep(drev)
        # 3.
        assert set(d.keys()) == set(drev.values())
        # 4.
        invals = list(d.values())
        all_invals = set().union(*invals)
        assert set(drev.keys()) == all_invals

    # Generated tests:
    assert dr.revert_rep({'a': {(0, 1), (4, 2), (2, 2)}, 'b': {(1, 3), (3, 0), (2, 1), (2, 0), (4, 1), (1, 1)}}) == {(0, 1): 'a', (4, 2): 'a', (2, 2): 'a', (1, 3): 'b', (3, 0): 'b', (2, 1): 'b', (2, 0): 'b', (4, 1): 'b', (1, 1): 'b'}
    assert dr.revert_rep({'a': {(0, 1), (3, 2), (1, 3), (0, 0), (3, 3), (3, 1), (4, 3), (4, 0)}, 'c': {(4, 2), (0, 3), (2, 2)}}) == {(0, 1): 'a', (3, 2): 'a', (1, 3): 'a', (0, 0): 'a', (3, 3): 'a', (3, 1): 'a', (4, 3): 'a', (4, 0): 'a', (4, 2): 'c', (0, 3): 'c', (2, 2): 'c'}
    assert dr.revert_rep({'a': {(0, 1), (2, 1), (4, 3), (1, 0), (0, 3)}, 'b': {(4, 2), (3, 3)}, 'c': {(3, 0), (4, 0)}}) == {(0, 1): 'a', (2, 1): 'a', (4, 3): 'a', (1, 0): 'a', (0, 3): 'a', (4, 2): 'b', (3, 3): 'b', (3, 0): 'c', (4, 0): 'c'}
    assert dr.revert_rep({'a': {(3, 2), (3, 3)}, 'b': {(1, 0), (2, 1)}, 'd': {(4, 2), (4, 0), (2, 2)}}) == {(3, 2): 'a', (3, 3): 'a', (1, 0): 'b', (2, 1): 'b', (4, 2): 'd', (4, 0): 'd', (2, 2): 'd'}
    assert dr.revert_rep({'a': {(0, 1), (3, 2), (1, 3), (3, 3), (2, 1), (2, 2)}, 'c': {(1, 2), (0, 0), (2, 0), (1, 0), (0, 2)}, 'b': {(3, 0), (3, 1)}}) == {(0, 1): 'a', (3, 2): 'a', (1, 3): 'a', (3, 3): 'a', (2, 1): 'a', (2, 2): 'a', (1, 2): 'c', (0, 0): 'c', (2, 0): 'c', (1, 0): 'c', (0, 2): 'c', (3, 0): 'b', (3, 1): 'b'}
    assert dr.revert_rep({'a': {(0, 1), (3, 2), (0, 2), (0, 3)}, 'd': {(1, 2), (0, 0), (3, 3)}, 'c': {(2, 0), (1, 0), (4, 3), (4, 0)}}) == {(0, 1): 'a', (3, 2): 'a', (0, 2): 'a', (0, 3): 'a', (1, 2): 'd', (0, 0): 'd', (3, 3): 'd', (2, 0): 'c', (1, 0): 'c', (4, 3): 'c', (4, 0): 'c'}
    assert dr.revert_rep({'c': {(0, 1)}, 'b': {(1, 2), (4, 2), (1, 3), (2, 3)}, 'a': {(2, 0), (4, 1)}}) == {(0, 1): 'c', (1, 2): 'b', (4, 2): 'b', (1, 3): 'b', (2, 3): 'b', (2, 0): 'a', (4, 1): 'a'}
    assert dr.revert_rep({'c': {(4, 2), (3, 2)}, 'b': {(0, 0), (2, 3)}, 'a': {(0, 3), (4, 1), (2, 2)}}) == {(4, 2): 'c', (3, 2): 'c', (0, 0): 'b', (2, 3): 'b', (0, 3): 'a', (4, 1): 'a', (2, 2): 'a'}
    assert dr.revert_rep({'c': {(0, 1), (1, 2), (0, 3), (0, 2), (4, 0)}, 'b': {(3, 2), (0, 0), (2, 0), (4, 2), (4, 1)}, 'a': {(1, 0), (1, 3)}}) == {(0, 1): 'c', (1, 2): 'c', (0, 3): 'c', (0, 2): 'c', (4, 0): 'c', (3, 2): 'b', (0, 0): 'b', (2, 0): 'b', (4, 2): 'b', (4, 1): 'b', (1, 0): 'a', (1, 3): 'a'}
    assert dr.revert_rep({'b': {(0, 1), (4, 1), (2, 3), (2, 2)}, 'c': {(4, 2), (3, 2), (2, 1)}, 'a': {(3, 1), (2, 0), (1, 1), (4, 3), (1, 0), (0, 2), (4, 0)}}) == {(0, 1): 'b', (4, 1): 'b', (2, 3): 'b', (2, 2): 'b', (4, 2): 'c', (3, 2): 'c', (2, 1): 'c', (3, 1): 'a', (2, 0): 'a', (1, 1): 'a', (4, 3): 'a', (1, 0): 'a', (0, 2): 'a', (4, 0): 'a'}
    assert dr.revert_rep({'b': {(0, 1), (3, 2), (2, 0), (4, 2), (0, 3), (4, 1), (1, 1)}, 'c': {(1, 3), (3, 1), (2, 3)}, 'a': {(0, 2), (4, 0), (3, 3), (2, 2)}}) == {(0, 1): 'b', (3, 2): 'b', (2, 0): 'b', (4, 2): 'b', (0, 3): 'b', (4, 1): 'b', (1, 1): 'b', (1, 3): 'c', (3, 1): 'c', (2, 3): 'c', (0, 2): 'a', (4, 0): 'a', (3, 3): 'a', (2, 2): 'a'}
    assert dr.revert_rep({'c': {(0, 2), (3, 2), (1, 1), (4, 0)}, 'a': {(3, 3)}, 'b': {(3, 1), (4, 3), (4, 2), (1, 0), (4, 1)}}) == {(0, 2): 'c', (3, 2): 'c', (1, 1): 'c', (4, 0): 'c', (3, 3): 'a', (3, 1): 'b', (4, 3): 'b', (4, 2): 'b', (1, 0): 'b', (4, 1): 'b'}
    assert dr.revert_rep({'a': {(3, 2), (1, 1)}, 'e': {(0, 3), (1, 3)}, 'd': {(4, 2)}, 'b': {(4, 1), (4, 0)}}) == {(3, 2): 'a', (1, 1): 'a', (0, 3): 'e', (1, 3): 'e', (4, 2): 'd', (4, 1): 'b', (4, 0): 'b'}
    assert dr.revert_rep({'a': {(1, 2), (2, 3), (3, 3)}, 'd': {(3, 0), (4, 2), (1, 0), (0, 2), (4, 0)}, 'c': {(0, 3), (2, 1)}, 'b': {(4, 3)}}) == {(1, 2): 'a', (2, 3): 'a', (3, 3): 'a', (3, 0): 'd', (4, 2): 'd', (1, 0): 'd', (0, 2): 'd', (4, 0): 'd', (0, 3): 'c', (2, 1): 'c', (4, 3): 'b'}
    assert dr.revert_rep({'d': {(0, 1), (3, 0), (1, 0), (1, 3)}, 'b': {(1, 2), (3, 2), (2, 1), (0, 3)}, 'a': {(0, 0), (0, 2)}, 'c': {(2, 0), (2, 3), (4, 0)}}) == {(0, 1): 'd', (3, 0): 'd', (1, 0): 'd', (1, 3): 'd', (1, 2): 'b', (3, 2): 'b', (2, 1): 'b', (0, 3): 'b', (0, 0): 'a', (0, 2): 'a', (2, 0): 'c', (2, 3): 'c', (4, 0): 'c'}
    assert dr.revert_rep({'b': {(1, 2), (3, 0)}, 'a': {(4, 2), (0, 0)}, 'd': {(2, 0), (2, 3)}, 'c': {(1, 1)}}) == {(1, 2): 'b', (3, 0): 'b', (4, 2): 'a', (0, 0): 'a', (2, 0): 'd', (2, 3): 'd', (1, 1): 'c'}
    assert dr.revert_rep({'c': {(1, 2), (3, 0), (0, 3)}, 'a': {(0, 1), (3, 3)}, 'e': {(2, 0)}, 'b': {(4, 1), (4, 0)}}) == {(1, 2): 'c', (3, 0): 'c', (0, 3): 'c', (0, 1): 'a', (3, 3): 'a', (2, 0): 'e', (4, 1): 'b', (4, 0): 'b'}
    assert dr.revert_rep({'d': {(0, 0), (0, 2), (2, 2)}, 'e': {(4, 2), (2, 1)}, 'c': {(2, 3), (4, 0)}, 'b': {(4, 3)}, 'a': {(4, 1)}}) == {(0, 0): 'd', (0, 2): 'd', (2, 2): 'd', (4, 2): 'e', (2, 1): 'e', (2, 3): 'c', (4, 0): 'c', (4, 3): 'b', (4, 1): 'a'}
    assert dr.revert_rep({'b': {(3, 2), (4, 0)}, 'e': {(0, 0), (2, 1), (2, 2), (0, 3), (1, 1)}, 'd': {(4, 2), (1, 3), (2, 3)}, 'c': {(3, 0), (3, 3)}, 'a': {(1, 0), (0, 2)}}) == {(3, 2): 'b', (4, 0): 'b', (0, 0): 'e', (2, 1): 'e', (2, 2): 'e', (0, 3): 'e', (1, 1): 'e', (4, 2): 'd', (1, 3): 'd', (2, 3): 'd', (3, 0): 'c', (3, 3): 'c', (1, 0): 'a', (0, 2): 'a'}
    assert dr.revert_rep({'f': {(0, 1), (1, 0)}, 'e': {(3, 2), (0, 0), (3, 0), (4, 2), (0, 2), (4, 0)}, 'b': {(2, 3), (3, 3), (4, 3)}, 'c': {(3, 1)}, 'a': {(2, 0)}, 'd': {(4, 1)}}) == {(0, 1): 'f', (1, 0): 'f', (3, 2): 'e', (0, 0): 'e', (3, 0): 'e', (4, 2): 'e', (0, 2): 'e', (4, 0): 'e', (2, 3): 'b', (3, 3): 'b', (4, 3): 'b', (3, 1): 'c', (2, 0): 'a', (4, 1): 'd'}
    assert dr.revert_rep({'f': {(0, 1), (1, 0)}, 'e': {(3, 2), (0, 0), (3, 0), (4, 2), (0, 2), (4, 0)}, 'b': {(2, 3), (3, 3), (4, 3)}, 'c': {(3, 1)}, 'a': {(2, 0)}, 'd': {(4, 1)}}) == {(0, 1): 'f', (1, 0): 'f', (3, 2): 'e', (0, 0): 'e', (3, 0): 'e', (4, 2): 'e', (0, 2): 'e', (4, 0): 'e', (2, 3): 'b', (3, 3): 'b', (4, 3): 'b', (3, 1): 'c', (2, 0): 'a', (4, 1): 'd'}

def test_swap_locations():
    # The inputs to `swap_locations` are: 
    #   -- a dictionary mapping locs to letters
    #   -- two locations which are keys in the dictionary and are adjacent
    # Test invariants:
    # 1) Calling `swap_locations` doesn't change the input dictionary.
    # 2) The output is a dictionary mapping locs to letters.
    # 3) The output dictionary has the same keys as the input dictionary.
    # 4) The output dictionary is either identical to the input dictionary
    #    (swapping the same color on adjacent locations) or has exactly 
    #    two values that differ.
    nrows = 5
    ncols = 4
    test_count = 0
    while test_count < NTESTS:
        nlocs = r.randrange(7, 15)
        nlabels = r.randrange(3, 7)
        labels = string.ascii_lowercase[:nlabels]
        d = make_random_dict1(nlocs, nrows, ncols, labels)
        d_copy = d.copy()
        # Get a pair of adjacent locs, if possible.
        adjs = make_random_adjacent_locs(d)
        if not adjs:
            continue
        (l1, l2) = adjs
        d2 = dr.swap_locations(d, l1, l2)
        # 1.
        assert d == d_copy
        # 2.
        assert u.is_rep(d2)
        # 3.
        assert set(d.keys()) == set(d2.keys())
        # 4.
        count = 0
        for key in d:
            if d[key] != d2[key]:
                count += 1
        assert count in [0, 2]
        test_count += 1

    # Generated tests:
    assert dr.swap_locations({(0, 2): 'b', (4, 1): 'c', (3, 2): 'a', (2, 1): 'c', (2, 0): 'b', (3, 0): 'c', (0, 0): 'a'}, (2, 1), (2, 0)) == {(0, 2): 'b', (4, 1): 'c', (3, 2): 'a', (2, 1): 'b', (2, 0): 'c', (3, 0): 'c', (0, 0): 'a'}
    assert dr.swap_locations({(0, 2): 'd', (2, 0): 'e', (0, 0): 'c', (3, 3): 'd', (2, 1): 'd', (4, 3): 'c', (4, 1): 'b', (0, 1): 'c', (0, 3): 'd'}, (0, 1), (0, 2)) == {(0, 2): 'c', (2, 0): 'e', (0, 0): 'c', (3, 3): 'd', (2, 1): 'd', (4, 3): 'c', (4, 1): 'b', (0, 1): 'd', (0, 3): 'd'}
    assert dr.swap_locations({(2, 1): 'f', (2, 2): 'f', (1, 3): 'e', (1, 1): 'd', (0, 1): 'e', (3, 3): 'd', (4, 1): 'a', (2, 0): 'd'}, (0, 1), (1, 1)) == {(2, 1): 'f', (2, 2): 'f', (1, 3): 'e', (1, 1): 'e', (0, 1): 'd', (3, 3): 'd', (4, 1): 'a', (2, 0): 'd'}
    assert dr.swap_locations({(4, 3): 'a', (1, 1): 'a', (2, 0): 'a', (3, 1): 'a', (0, 0): 'c', (0, 1): 'a', (0, 3): 'a'}, (0, 1), (1, 1)) == {(4, 3): 'a', (1, 1): 'a', (2, 0): 'a', (3, 1): 'a', (0, 0): 'c', (0, 1): 'a', (0, 3): 'a'}
    assert dr.swap_locations({(0, 3): 'b', (4, 0): 'c', (1, 2): 'a', (3, 3): 'c', (4, 2): 'b', (4, 3): 'a', (0, 1): 'd', (2, 2): 'b'}, (4, 3), (4, 2)) == {(0, 3): 'b', (4, 0): 'c', (1, 2): 'a', (3, 3): 'c', (4, 2): 'a', (4, 3): 'b', (0, 1): 'd', (2, 2): 'b'}
    assert dr.swap_locations({(2, 2): 'b', (2, 0): 'e', (3, 2): 'f', (3, 1): 'd', (1, 1): 'c', (1, 0): 'c', (1, 3): 'c', (0, 1): 'f', (2, 1): 'f'}, (2, 0), (1, 0)) == {(2, 2): 'b', (2, 0): 'c', (3, 2): 'f', (3, 1): 'd', (1, 1): 'c', (1, 0): 'e', (1, 3): 'c', (0, 1): 'f', (2, 1): 'f'}
    assert dr.swap_locations({(1, 3): 'e', (3, 1): 'a', (2, 2): 'd', (2, 1): 'a', (0, 1): 'a', (1, 0): 'a'}, (2, 1), (2, 2)) == {(1, 3): 'e', (3, 1): 'a', (2, 2): 'a', (2, 1): 'd', (0, 1): 'a', (1, 0): 'a'}
    assert dr.swap_locations({(1, 2): 'e', (4, 0): 'b', (2, 0): 'c', (4, 3): 'e', (3, 1): 'd', (2, 2): 'b', (1, 1): 'b', (3, 3): 'd', (1, 3): 'b'}, (3, 3), (4, 3)) == {(1, 2): 'e', (4, 0): 'b', (2, 0): 'c', (4, 3): 'd', (3, 1): 'd', (2, 2): 'b', (1, 1): 'b', (3, 3): 'e', (1, 3): 'b'}
    assert dr.swap_locations({(1, 3): 'd', (3, 2): 'c', (0, 0): 'c', (1, 2): 'd', (2, 3): 'd', (2, 1): 'b', (3, 1): 'b', (3, 0): 'f'}, (1, 2), (1, 3)) == {(1, 3): 'd', (3, 2): 'c', (0, 0): 'c', (1, 2): 'd', (2, 3): 'd', (2, 1): 'b', (3, 1): 'b', (3, 0): 'f'}
    assert dr.swap_locations({(4, 3): 'c', (1, 1): 'e', (1, 0): 'c', (2, 3): 'b', (4, 0): 'f', (3, 1): 'f', (3, 3): 'e', (0, 0): 'd', (1, 3): 'd', (2, 1): 'e', (0, 1): 'e'}, (0, 0), (0, 1)) == {(4, 3): 'c', (1, 1): 'e', (1, 0): 'c', (2, 3): 'b', (4, 0): 'f', (3, 1): 'f', (3, 3): 'e', (0, 0): 'e', (1, 3): 'd', (2, 1): 'e', (0, 1): 'd'}
    assert dr.swap_locations({(3, 1): 'd', (4, 0): 'b', (1, 1): 'd', (4, 2): 'e', (0, 3): 'c', (2, 0): 'c', (2, 2): 'c', (0, 0): 'a', (4, 1): 'a', (4, 3): 'a', (3, 0): 'c', (2, 1): 'c'}, (3, 0), (2, 0)) == {(3, 1): 'd', (4, 0): 'b', (1, 1): 'd', (4, 2): 'e', (0, 3): 'c', (2, 0): 'c', (2, 2): 'c', (0, 0): 'a', (4, 1): 'a', (4, 3): 'a', (3, 0): 'c', (2, 1): 'c'}
    assert dr.swap_locations({(2, 3): 'a', (0, 3): 'a', (3, 0): 'd', (0, 0): 'a', (1, 0): 'c', (4, 1): 'b', (0, 1): 'a'}, (0, 1), (0, 0)) == {(2, 3): 'a', (0, 3): 'a', (3, 0): 'd', (0, 0): 'a', (1, 0): 'c', (4, 1): 'b', (0, 1): 'a'}
    assert dr.swap_locations({(0, 3): 'a', (3, 1): 'b', (1, 3): 'd', (4, 0): 'f', (2, 2): 'e', (4, 2): 'e', (1, 2): 'c'}, (0, 3), (1, 3)) == {(0, 3): 'd', (3, 1): 'b', (1, 3): 'a', (4, 0): 'f', (2, 2): 'e', (4, 2): 'e', (1, 2): 'c'}
    assert dr.swap_locations({(0, 3): 'f', (0, 0): 'c', (0, 1): 'a', (2, 2): 'e', (4, 0): 'a', (0, 2): 'd', (4, 2): 'a', (1, 0): 'e'}, (0, 3), (0, 2)) == {(0, 3): 'd', (0, 0): 'c', (0, 1): 'a', (2, 2): 'e', (4, 0): 'a', (0, 2): 'f', (4, 2): 'a', (1, 0): 'e'}
    assert dr.swap_locations({(4, 3): 'e', (0, 3): 'c', (3, 1): 'e', (1, 1): 'f', (0, 2): 'f', (0, 0): 'a', (1, 0): 'd'}, (1, 0), (0, 0)) == {(4, 3): 'e', (0, 3): 'c', (3, 1): 'e', (1, 1): 'f', (0, 2): 'f', (0, 0): 'd', (1, 0): 'a'}
    assert dr.swap_locations({(1, 1): 'e', (1, 0): 'd', (4, 0): 'c', (4, 3): 'd', (2, 0): 'b', (2, 1): 'a', (3, 0): 'f', (1, 3): 'f', (1, 2): 'e', (4, 2): 'a'}, (4, 0), (3, 0)) == {(1, 1): 'e', (1, 0): 'd', (4, 0): 'f', (4, 3): 'd', (2, 0): 'b', (2, 1): 'a', (3, 0): 'c', (1, 3): 'f', (1, 2): 'e', (4, 2): 'a'}
    assert dr.swap_locations({(4, 0): 'b', (0, 3): 'd', (2, 3): 'd', (0, 2): 'a', (4, 3): 'c', (3, 2): 'b', (1, 3): 'd', (0, 0): 'd', (3, 3): 'c'}, (2, 3), (3, 3)) == {(4, 0): 'b', (0, 3): 'd', (2, 3): 'c', (0, 2): 'a', (4, 3): 'c', (3, 2): 'b', (1, 3): 'd', (0, 0): 'd', (3, 3): 'd'}
    assert dr.swap_locations({(3, 3): 'b', (1, 2): 'a', (1, 3): 'a', (4, 1): 'c', (3, 0): 'a', (3, 1): 'e', (4, 3): 'b', (2, 1): 'd', (0, 2): 'b'}, (0, 2), (1, 2)) == {(3, 3): 'b', (1, 2): 'b', (1, 3): 'a', (4, 1): 'c', (3, 0): 'a', (3, 1): 'e', (4, 3): 'b', (2, 1): 'd', (0, 2): 'a'}
    assert dr.swap_locations({(3, 1): 'c', (1, 2): 'e', (3, 3): 'a', (4, 1): 'c', (0, 2): 'd', (4, 2): 'd', (4, 3): 'd', (0, 1): 'd'}, (4, 1), (4, 2)) == {(3, 1): 'c', (1, 2): 'e', (3, 3): 'a', (4, 1): 'd', (0, 2): 'd', (4, 2): 'c', (4, 3): 'd', (0, 1): 'd'}
    assert dr.swap_locations({(4, 1): 'c', (2, 3): 'c', (4, 0): 'd', (2, 2): 'a', (2, 0): 'a', (1, 2): 'c', (3, 1): 'e'}, (3, 1), (4, 1)) == {(4, 1): 'e', (2, 3): 'c', (4, 0): 'd', (2, 2): 'a', (2, 0): 'a', (1, 2): 'c', (3, 1): 'c'}
    assert dr.swap_locations({(4, 1): 'c', (2, 3): 'c', (4, 0): 'd', (2, 2): 'a', (2, 0): 'a', (1, 2): 'c', (3, 1): 'e'}, (3, 1), (4, 1)) == {(4, 1): 'e', (2, 3): 'c', (4, 0): 'd', (2, 2): 'a', (2, 0): 'a', (1, 2): 'c', (3, 1): 'c'}

def test_remove_connected_groups():
    # The inputs to `remove_connected_groups` is a dictionary mapping 
    #   locs to letters.
    # Test invariants:
    # 1) Calling `remove_connected_groups` doesn't change the input dictionary.
    # 2) The output is a 2-tuple of dictionaries mapping locs to letters.
    # 3) The output dictionaries are disjoint (no common keys).
    # 4) The "union" of the output dictionaries is equal to the input dictionary.
    nrows = 5
    ncols = 4
    for _ in range(NTESTS):
        nlocs = r.randrange(7, 15)
        nlabels = r.randrange(3, 7)
        labels = string.ascii_lowercase[:nlabels]
        d = make_random_dict1(nlocs, nrows, ncols, labels)
        d_copy = d.copy()
        output = dr.remove_connected_groups(d)
        # 1.
        assert d == d_copy
        # 2.
        assert type(output) is tuple
        assert len(output) == 2
        d1 = output[0]
        d2 = output[1]
        assert u.is_rep(d1)
        assert u.is_rep(d2)
        # 3.
        d1_keys = set(d1.keys())
        d2_keys = set(d2.keys())
        assert len(d1_keys.intersection(d2_keys)) == 0
        # 4.
        d3 = d1.copy()
        d3.update(d2)
        assert d3 == d

    # Generated tests:
    assert dr.remove_connected_groups({(2, 2): 'b', (4, 1): 'b', (2, 0): 'a', (3, 2): 'b', (2, 1): 'b', (4, 0): 'a'}) == ({(4, 1): 'b', (2, 0): 'a', (4, 0): 'a'}, {(3, 2): 'b', (2, 1): 'b', (2, 2): 'b'})
    assert dr.remove_connected_groups({(1, 1): 'b', (0, 1): 'b', (2, 2): 'b', (1, 0): 'b', (4, 2): 'c', (4, 3): 'b'}) == ({(4, 3): 'b', (2, 2): 'b', (4, 2): 'c'}, {(0, 1): 'b', (1, 0): 'b', (1, 1): 'b'})
    assert dr.remove_connected_groups({(2, 0): 'e', (4, 1): 'e', (2, 3): 'f', (0, 1): 'b', (0, 2): 'f', (0, 3): 'c', (0, 0): 'd'}) == ({(2, 0): 'e', (4, 1): 'e', (2, 3): 'f', (0, 2): 'f', (0, 1): 'b', (0, 3): 'c', (0, 0): 'd'}, {})
    assert dr.remove_connected_groups({(3, 1): 'c', (4, 2): 'd', (3, 0): 'c', (4, 1): 'c', (4, 3): 'f', (2, 0): 'b', (0, 3): 'c'}) == ({(0, 3): 'c', (4, 2): 'd', (4, 3): 'f', (2, 0): 'b'}, {(3, 0): 'c', (3, 1): 'c', (4, 1): 'c'})
    assert dr.remove_connected_groups({(0, 2): 'b', (0, 0): 'a', (3, 1): 'a', (2, 0): 'c', (1, 2): 'b', (0, 1): 'b', (4, 0): 'c', (0, 3): 'a'}) == ({(0, 3): 'a', (0, 0): 'a', (3, 1): 'a', (2, 0): 'c', (4, 0): 'c'}, {(1, 2): 'b', (0, 1): 'b', (0, 2): 'b'})
    assert dr.remove_connected_groups({(4, 0): 'c', (1, 2): 'a', (1, 1): 'f', (1, 3): 'a', (0, 1): 'c', (0, 2): 'a', (0, 0): 'b', (3, 2): 'd'}) == ({(0, 1): 'c', (4, 0): 'c', (1, 1): 'f', (0, 0): 'b', (3, 2): 'd'}, {(1, 2): 'a', (1, 3): 'a', (0, 2): 'a'})
    assert dr.remove_connected_groups({(0, 2): 'c', (3, 3): 'c', (2, 3): 'c', (3, 2): 'a', (0, 1): 'a', (3, 1): 'a', (2, 1): 'a', (1, 0): 'b'}) == ({(0, 2): 'c', (2, 3): 'c', (3, 3): 'c', (0, 1): 'a', (1, 0): 'b'}, {(3, 2): 'a', (3, 1): 'a', (2, 1): 'a'})
    assert dr.remove_connected_groups({(1, 2): 'a', (4, 0): 'a', (3, 1): 'a', (1, 3): 'c', (4, 1): 'a', (2, 2): 'b', (0, 0): 'a', (1, 0): 'c'}) == ({(1, 2): 'a', (0, 0): 'a', (1, 0): 'c', (1, 3): 'c', (2, 2): 'b'}, {(3, 1): 'a', (4, 1): 'a', (4, 0): 'a'})
    assert dr.remove_connected_groups({(2, 0): 'e', (4, 1): 'd', (1, 3): 'b', (1, 0): 'b', (3, 1): 'b', (3, 2): 'b', (3, 0): 'b', (0, 2): 'b'}) == ({(2, 0): 'e', (4, 1): 'd', (1, 0): 'b', (1, 3): 'b', (0, 2): 'b'}, {(3, 0): 'b', (3, 2): 'b', (3, 1): 'b'})
    assert dr.remove_connected_groups({(2, 0): 'a', (0, 2): 'a', (4, 3): 'e', (0, 0): 'c', (2, 1): 'a', (3, 3): 'a', (0, 3): 'e', (1, 1): 'a', (1, 3): 'e'}) == ({(0, 2): 'a', (3, 3): 'a', (0, 3): 'e', (1, 3): 'e', (4, 3): 'e', (0, 0): 'c'}, {(2, 0): 'a', (1, 1): 'a', (2, 1): 'a'})
    assert dr.remove_connected_groups({(4, 1): 'c', (4, 3): 'c', (3, 3): 'b', (3, 2): 'd', (0, 2): 'e', (3, 1): 'e', (4, 2): 'c', (1, 1): 'd', (2, 3): 'e'}) == ({(3, 3): 'b', (3, 2): 'd', (1, 1): 'd', (3, 1): 'e', (2, 3): 'e', (0, 2): 'e'}, {(4, 2): 'c', (4, 1): 'c', (4, 3): 'c'})
    assert dr.remove_connected_groups({(4, 0): 'c', (0, 0): 'b', (1, 2): 'c', (0, 2): 'a', (3, 1): 'c', (4, 1): 'b', (3, 0): 'c', (2, 0): 'b', (1, 0): 'b'}) == ({(1, 2): 'c', (4, 1): 'b', (0, 2): 'a'}, {(3, 0): 'c', (3, 1): 'c', (4, 0): 'c', (2, 0): 'b', (1, 0): 'b', (0, 0): 'b'})
    assert dr.remove_connected_groups({(1, 1): 'c', (4, 1): 'd', (3, 2): 'b', (2, 2): 'd', (4, 3): 'a', (1, 2): 'b', (4, 0): 'b', (3, 3): 'a', (0, 0): 'd', (0, 1): 'd'}) == ({(1, 1): 'c', (0, 1): 'd', (0, 0): 'd', (4, 1): 'd', (2, 2): 'd', (1, 2): 'b', (3, 2): 'b', (4, 0): 'b', (3, 3): 'a', (4, 3): 'a'}, {})
    assert dr.remove_connected_groups({(2, 1): 'd', (1, 0): 'c', (3, 2): 'c', (0, 3): 'a', (4, 3): 'b', (3, 3): 'c', (0, 2): 'a', (1, 2): 'a', (3, 0): 'd', (0, 1): 'b'}) == ({(3, 0): 'd', (2, 1): 'd', (1, 0): 'c', (3, 2): 'c', (3, 3): 'c', (0, 1): 'b', (4, 3): 'b'}, {(1, 2): 'a', (0, 3): 'a', (0, 2): 'a'})
    assert dr.remove_connected_groups({(2, 2): 'a', (1, 2): 'c', (0, 0): 'a', (4, 0): 'c', (1, 3): 'c', (2, 1): 'a', (1, 0): 'c', (2, 0): 'b', (2, 3): 'a', (3, 0): 'c'}) == ({(0, 0): 'a', (1, 2): 'c', (1, 3): 'c', (3, 0): 'c', (1, 0): 'c', (4, 0): 'c', (2, 0): 'b'}, {(2, 3): 'a', (2, 1): 'a', (2, 2): 'a'})
    assert dr.remove_connected_groups({(2, 1): 'b', (1, 3): 'b', (3, 1): 'b', (0, 1): 'c', (2, 0): 'd', (0, 2): 'b', (0, 0): 'c', (3, 0): 'a', (3, 3): 'a', (1, 2): 'c', (1, 1): 'c'}) == ({(1, 3): 'b', (3, 1): 'b', (0, 2): 'b', (2, 1): 'b', (2, 0): 'd', (3, 0): 'a', (3, 3): 'a'}, {(0, 1): 'c', (0, 0): 'c', (1, 1): 'c', (1, 2): 'c'})
    assert dr.remove_connected_groups({(3, 3): 'a', (4, 1): 'c', (3, 1): 'c', (0, 2): 'b', (2, 3): 'c', (1, 1): 'b', (4, 2): 'c', (1, 3): 'a', (2, 0): 'b', (0, 0): 'b', (4, 0): 'b'}) == ({(1, 3): 'a', (3, 3): 'a', (2, 3): 'c', (2, 0): 'b', (0, 0): 'b', (1, 1): 'b', (0, 2): 'b', (4, 0): 'b'}, {(4, 2): 'c', (3, 1): 'c', (4, 1): 'c'})
    assert dr.remove_connected_groups({(2, 0): 'f', (0, 3): 'e', (4, 1): 'e', (0, 2): 'f', (2, 3): 'c', (3, 0): 'a', (2, 1): 'e', (1, 0): 'd', (4, 2): 'c', (0, 1): 'd', (1, 1): 'd'}) == ({(2, 0): 'f', (0, 2): 'f', (0, 3): 'e', (4, 1): 'e', (2, 1): 'e', (4, 2): 'c', (2, 3): 'c', (3, 0): 'a'}, {(0, 1): 'd', (1, 0): 'd', (1, 1): 'd'})
    assert dr.remove_connected_groups({(1, 1): 'a', (3, 2): 'c', (0, 3): 'b', (2, 2): 'a', (1, 3): 'a', (3, 3): 'd', (1, 0): 'c', (2, 1): 'a', (2, 3): 'd', (0, 2): 'c', (4, 1): 'b'}) == ({(1, 3): 'a', (0, 2): 'c', (1, 0): 'c', (3, 2): 'c', (0, 3): 'b', (4, 1): 'b', (2, 3): 'd', (3, 3): 'd'}, {(1, 1): 'a', (2, 1): 'a', (2, 2): 'a'})
    assert dr.remove_connected_groups({(0, 3): 'e', (2, 0): 'a', (0, 1): 'a', (3, 2): 'b', (4, 1): 'e', (3, 0): 'd', (0, 0): 'a', (4, 3): 'e', (2, 1): 'e', (4, 0): 'b', (1, 1): 'a'}) == ({(0, 3): 'e', (2, 1): 'e', (4, 1): 'e', (4, 3): 'e', (2, 0): 'a', (3, 2): 'b', (4, 0): 'b', (3, 0): 'd'}, {(0, 1): 'a', (0, 0): 'a', (1, 1): 'a'})
    assert dr.remove_connected_groups({(0, 3): 'e', (2, 0): 'a', (0, 1): 'a', (3, 2): 'b', (4, 1): 'e', (3, 0): 'd', (0, 0): 'a', (4, 3): 'e', (2, 1): 'e', (4, 0): 'b', (1, 1): 'a'}) == ({(0, 3): 'e', (2, 1): 'e', (4, 1): 'e', (4, 3): 'e', (2, 0): 'a', (3, 2): 'b', (4, 0): 'b', (3, 0): 'd'}, {(0, 1): 'a', (0, 0): 'a', (1, 1): 'a'})

def test_adjacent_moves():
    # Test invariants:
    # 1) The output is a set of pairs of locations where each locations is
    #    of the form (row, column) and row is in (0, nrows)
    #    and column is in (0, ncolumns)
    # 2) Each output pair of locations is adjacent to each other.
    # 3) The output pairs of locations are ordered with the smallest coming first
    #    i.e. loc1 < loc2
    for _ in range(NTESTS):
        nrows = r.randrange(3, 7)
        ncols = r.randrange(3, 15)
        adjs  = dr.adjacent_moves(nrows, ncols)
        for a in adjs:
            # 1
            assert type(a) is tuple
            assert len(a) == 2
            for loc in a:
                assert u.is_loc(loc)
                (row, col) = loc
                assert row >= 0
                assert row < nrows
                assert col >= 0
                assert col < ncols
            # 2
            loc0 = a[0]
            loc1 = a[1]
            assert ls.is_adjacent(loc0, loc1)
            # 3
            assert loc0 < loc1

    # Generated tests:
    assert dr.adjacent_moves(3, 5) == {((0, 2), (1, 2)), ((1, 0), (2, 0)), ((1, 1), (2, 1)), ((2, 1), (2, 2)), ((0, 2), (0, 3)), ((2, 0), (2, 1)), ((1, 2), (2, 2)), ((0, 3), (1, 3)), ((2, 2), (2, 3)), ((2, 3), (2, 4)), ((0, 4), (1, 4)), ((1, 2), (1, 3)), ((0, 1), (1, 1)), ((1, 4), (2, 4)), ((1, 0), (1, 1)), ((1, 1), (1, 2)), ((0, 0), (1, 0)), ((1, 3), (1, 4)), ((0, 0), (0, 1)), ((0, 3), (0, 4)), ((1, 3), (2, 3)), ((0, 1), (0, 2))}
    assert dr.adjacent_moves(4, 4) == {((2, 1), (3, 1)), ((0, 2), (1, 2)), ((2, 2), (3, 2)), ((1, 0), (2, 0)), ((1, 1), (2, 1)), ((2, 1), (2, 2)), ((0, 2), (0, 3)), ((2, 0), (2, 1)), ((1, 2), (2, 2)), ((3, 0), (3, 1)), ((3, 1), (3, 2)), ((0, 3), (1, 3)), ((2, 2), (2, 3)), ((2, 3), (3, 3)), ((3, 2), (3, 3)), ((1, 2), (1, 3)), ((0, 1), (1, 1)), ((1, 0), (1, 1)), ((1, 1), (1, 2)), ((0, 0), (1, 0)), ((2, 0), (3, 0)), ((0, 0), (0, 1)), ((1, 3), (2, 3)), ((0, 1), (0, 2))}
    assert dr.adjacent_moves(6, 4) == {((2, 1), (3, 1)), ((5, 0), (5, 1)), ((0, 2), (1, 2)), ((2, 2), (3, 2)), ((4, 0), (5, 0)), ((1, 0), (2, 0)), ((1, 1), (2, 1)), ((4, 2), (4, 3)), ((2, 1), (2, 2)), ((0, 2), (0, 3)), ((2, 0), (2, 1)), ((4, 1), (5, 1)), ((1, 2), (2, 2)), ((3, 0), (3, 1)), ((3, 1), (3, 2)), ((0, 3), (1, 3)), ((2, 2), (2, 3)), ((2, 3), (3, 3)), ((3, 3), (4, 3)), ((3, 2), (3, 3)), ((1, 2), (1, 3)), ((0, 1), (1, 1)), ((4, 3), (5, 3)), ((4, 2), (5, 2)), ((4, 0), (4, 1)), ((1, 0), (1, 1)), ((3, 1), (4, 1)), ((1, 1), (1, 2)), ((0, 0), (1, 0)), ((4, 1), (4, 2)), ((5, 2), (5, 3)), ((2, 0), (3, 0)), ((0, 0), (0, 1)), ((1, 3), (2, 3)), ((3, 0), (4, 0)), ((3, 2), (4, 2)), ((0, 1), (0, 2)), ((5, 1), (5, 2))}
    assert dr.adjacent_moves(4, 6) == {((2, 1), (3, 1)), ((0, 2), (1, 2)), ((2, 2), (3, 2)), ((1, 0), (2, 0)), ((1, 1), (2, 1)), ((1, 5), (2, 5)), ((2, 4), (2, 5)), ((2, 1), (2, 2)), ((0, 2), (0, 3)), ((2, 0), (2, 1)), ((1, 2), (2, 2)), ((1, 4), (1, 5)), ((3, 0), (3, 1)), ((3, 1), (3, 2)), ((0, 3), (1, 3)), ((0, 4), (0, 5)), ((2, 2), (2, 3)), ((2, 3), (2, 4)), ((0, 4), (1, 4)), ((2, 5), (3, 5)), ((2, 3), (3, 3)), ((3, 2), (3, 3)), ((1, 2), (1, 3)), ((0, 1), (1, 1)), ((1, 4), (2, 4)), ((2, 4), (3, 4)), ((1, 0), (1, 1)), ((1, 1), (1, 2)), ((0, 5), (1, 5)), ((3, 3), (3, 4)), ((0, 0), (1, 0)), ((1, 3), (1, 4)), ((3, 4), (3, 5)), ((2, 0), (3, 0)), ((0, 0), (0, 1)), ((0, 3), (0, 4)), ((1, 3), (2, 3)), ((0, 1), (0, 2))}
    assert dr.adjacent_moves(5, 5) == {((2, 1), (3, 1)), ((0, 2), (1, 2)), ((2, 2), (3, 2)), ((1, 0), (2, 0)), ((4, 3), (4, 4)), ((1, 1), (2, 1)), ((4, 2), (4, 3)), ((2, 1), (2, 2)), ((0, 2), (0, 3)), ((2, 0), (2, 1)), ((1, 2), (2, 2)), ((3, 0), (3, 1)), ((3, 1), (3, 2)), ((0, 3), (1, 3)), ((2, 2), (2, 3)), ((2, 3), (2, 4)), ((0, 4), (1, 4)), ((2, 3), (3, 3)), ((3, 3), (4, 3)), ((3, 2), (3, 3)), ((1, 2), (1, 3)), ((0, 1), (1, 1)), ((1, 4), (2, 4)), ((4, 0), (4, 1)), ((2, 4), (3, 4)), ((1, 0), (1, 1)), ((3, 1), (4, 1)), ((1, 1), (1, 2)), ((3, 3), (3, 4)), ((0, 0), (1, 0)), ((4, 1), (4, 2)), ((1, 3), (1, 4)), ((2, 0), (3, 0)), ((3, 4), (4, 4)), ((0, 0), (0, 1)), ((0, 3), (0, 4)), ((1, 3), (2, 3)), ((3, 0), (4, 0)), ((3, 2), (4, 2)), ((0, 1), (0, 2))}
    assert dr.adjacent_moves(3, 9) == {((0, 2), (1, 2)), ((1, 0), (2, 0)), ((1, 8), (2, 8)), ((1, 1), (2, 1)), ((1, 5), (2, 5)), ((2, 1), (2, 2)), ((0, 2), (0, 3)), ((0, 6), (0, 7)), ((2, 0), (2, 1)), ((2, 4), (2, 5)), ((1, 2), (2, 2)), ((1, 4), (1, 5)), ((0, 3), (1, 3)), ((1, 5), (1, 6)), ((0, 4), (0, 5)), ((2, 2), (2, 3)), ((2, 3), (2, 4)), ((0, 4), (1, 4)), ((1, 2), (1, 3)), ((0, 5), (0, 6)), ((0, 1), (1, 1)), ((1, 4), (2, 4)), ((1, 6), (1, 7)), ((1, 6), (2, 6)), ((1, 0), (1, 1)), ((0, 8), (1, 8)), ((1, 1), (1, 2)), ((0, 5), (1, 5)), ((2, 7), (2, 8)), ((0, 0), (1, 0)), ((0, 7), (1, 7)), ((1, 3), (1, 4)), ((0, 0), (0, 1)), ((0, 3), (0, 4)), ((2, 6), (2, 7)), ((2, 5), (2, 6)), ((1, 3), (2, 3)), ((0, 6), (1, 6)), ((0, 7), (0, 8)), ((1, 7), (2, 7)), ((0, 1), (0, 2)), ((1, 7), (1, 8))}
    assert dr.adjacent_moves(5, 6) == {((2, 1), (3, 1)), ((0, 2), (1, 2)), ((2, 2), (3, 2)), ((1, 0), (2, 0)), ((4, 3), (4, 4)), ((1, 1), (2, 1)), ((1, 5), (2, 5)), ((2, 4), (2, 5)), ((2, 1), (2, 2)), ((0, 2), (0, 3)), ((2, 0), (2, 1)), ((4, 2), (4, 3)), ((1, 2), (2, 2)), ((1, 4), (1, 5)), ((3, 5), (4, 5)), ((3, 0), (3, 1)), ((3, 1), (3, 2)), ((0, 3), (1, 3)), ((0, 4), (0, 5)), ((2, 2), (2, 3)), ((2, 3), (2, 4)), ((0, 4), (1, 4)), ((2, 5), (3, 5)), ((2, 3), (3, 3)), ((3, 3), (4, 3)), ((3, 2), (3, 3)), ((1, 2), (1, 3)), ((0, 1), (1, 1)), ((1, 4), (2, 4)), ((4, 0), (4, 1)), ((2, 4), (3, 4)), ((4, 4), (4, 5)), ((1, 0), (1, 1)), ((3, 1), (4, 1)), ((1, 1), (1, 2)), ((0, 5), (1, 5)), ((3, 3), (3, 4)), ((0, 0), (1, 0)), ((4, 1), (4, 2)), ((1, 3), (1, 4)), ((3, 4), (3, 5)), ((2, 0), (3, 0)), ((3, 4), (4, 4)), ((0, 0), (0, 1)), ((0, 3), (0, 4)), ((1, 3), (2, 3)), ((3, 0), (4, 0)), ((3, 2), (4, 2)), ((0, 1), (0, 2))}
    assert dr.adjacent_moves(3, 12) == {((2, 10), (2, 11)), ((1, 11), (2, 11)), ((0, 2), (1, 2)), ((1, 0), (2, 0)), ((1, 8), (2, 8)), ((1, 1), (2, 1)), ((1, 5), (2, 5)), ((0, 2), (0, 3)), ((0, 6), (0, 7)), ((2, 0), (2, 1)), ((2, 1), (2, 2)), ((2, 4), (2, 5)), ((2, 8), (2, 9)), ((1, 4), (1, 5)), ((2, 9), (2, 10)), ((1, 2), (2, 2)), ((0, 9), (1, 9)), ((0, 10), (1, 10)), ((0, 8), (0, 9)), ((0, 3), (1, 3)), ((1, 5), (1, 6)), ((1, 10), (2, 10)), ((0, 4), (0, 5)), ((2, 2), (2, 3)), ((2, 3), (2, 4)), ((0, 4), (1, 4)), ((1, 2), (1, 3)), ((0, 5), (0, 6)), ((0, 1), (1, 1)), ((1, 4), (2, 4)), ((1, 6), (1, 7)), ((1, 6), (2, 6)), ((1, 0), (1, 1)), ((1, 10), (1, 11)), ((0, 1), (0, 2)), ((0, 8), (1, 8)), ((1, 1), (1, 2)), ((0, 11), (1, 11)), ((0, 5), (1, 5)), ((2, 7), (2, 8)), ((0, 0), (1, 0)), ((0, 9), (0, 10)), ((0, 7), (1, 7)), ((1, 3), (1, 4)), ((1, 9), (1, 10)), ((0, 0), (0, 1)), ((0, 3), (0, 4)), ((2, 6), (2, 7)), ((2, 5), (2, 6)), ((1, 3), (2, 3)), ((0, 6), (1, 6)), ((0, 7), (0, 8)), ((1, 7), (2, 7)), ((1, 9), (2, 9)), ((1, 8), (1, 9)), ((0, 10), (0, 11)), ((1, 7), (1, 8))}
    assert dr.adjacent_moves(3, 13) == {((2, 10), (2, 11)), ((0, 9), (1, 9)), ((1, 11), (2, 11)), ((0, 2), (1, 2)), ((1, 0), (2, 0)), ((1, 8), (2, 8)), ((1, 1), (2, 1)), ((1, 5), (2, 5)), ((0, 2), (0, 3)), ((0, 6), (0, 7)), ((2, 0), (2, 1)), ((2, 1), (2, 2)), ((2, 4), (2, 5)), ((2, 8), (2, 9)), ((1, 4), (1, 5)), ((2, 9), (2, 10)), ((2, 11), (2, 12)), ((1, 2), (2, 2)), ((0, 10), (1, 10)), ((0, 8), (0, 9)), ((0, 3), (1, 3)), ((1, 5), (1, 6)), ((1, 11), (1, 12)), ((0, 4), (0, 5)), ((2, 2), (2, 3)), ((2, 3), (2, 4)), ((0, 4), (1, 4)), ((1, 10), (2, 10)), ((1, 2), (1, 3)), ((0, 5), (0, 6)), ((0, 1), (1, 1)), ((1, 4), (2, 4)), ((1, 6), (1, 7)), ((1, 6), (2, 6)), ((1, 0), (1, 1)), ((1, 10), (1, 11)), ((0, 1), (0, 2)), ((0, 8), (1, 8)), ((1, 1), (1, 2)), ((0, 11), (1, 11)), ((0, 12), (1, 12)), ((0, 5), (1, 5)), ((2, 7), (2, 8)), ((0, 0), (1, 0)), ((0, 9), (0, 10)), ((0, 7), (1, 7)), ((1, 3), (1, 4)), ((1, 9), (1, 10)), ((0, 0), (0, 1)), ((0, 3), (0, 4)), ((0, 11), (0, 12)), ((2, 6), (2, 7)), ((2, 5), (2, 6)), ((1, 3), (2, 3)), ((0, 6), (1, 6)), ((1, 12), (2, 12)), ((0, 7), (0, 8)), ((1, 7), (2, 7)), ((1, 9), (2, 9)), ((1, 8), (1, 9)), ((0, 10), (0, 11)), ((1, 7), (1, 8))}
    assert dr.adjacent_moves(5, 8) == {((2, 1), (3, 1)), ((3, 6), (3, 7)), ((2, 6), (3, 6)), ((0, 2), (1, 2)), ((2, 2), (3, 2)), ((1, 0), (2, 0)), ((4, 3), (4, 4)), ((1, 1), (2, 1)), ((1, 5), (2, 5)), ((2, 4), (2, 5)), ((2, 1), (2, 2)), ((0, 2), (0, 3)), ((0, 6), (0, 7)), ((2, 0), (2, 1)), ((4, 2), (4, 3)), ((1, 4), (1, 5)), ((1, 2), (2, 2)), ((3, 5), (4, 5)), ((2, 7), (3, 7)), ((3, 0), (3, 1)), ((3, 1), (3, 2)), ((0, 3), (1, 3)), ((1, 5), (1, 6)), ((3, 6), (4, 6)), ((0, 4), (0, 5)), ((2, 2), (2, 3)), ((2, 3), (2, 4)), ((0, 4), (1, 4)), ((2, 5), (3, 5)), ((2, 3), (3, 3)), ((3, 3), (4, 3)), ((1, 2), (1, 3)), ((3, 2), (3, 3)), ((0, 5), (0, 6)), ((4, 5), (4, 6)), ((0, 1), (1, 1)), ((1, 4), (2, 4)), ((4, 0), (4, 1)), ((1, 6), (1, 7)), ((2, 4), (3, 4)), ((1, 6), (2, 6)), ((4, 4), (4, 5)), ((1, 0), (1, 1)), ((3, 1), (4, 1)), ((1, 1), (1, 2)), ((3, 5), (3, 6)), ((0, 5), (1, 5)), ((3, 3), (3, 4)), ((0, 0), (1, 0)), ((4, 1), (4, 2)), ((4, 6), (4, 7)), ((1, 3), (1, 4)), ((0, 7), (1, 7)), ((3, 4), (3, 5)), ((2, 0), (3, 0)), ((3, 4), (4, 4)), ((0, 0), (0, 1)), ((0, 3), (0, 4)), ((2, 6), (2, 7)), ((2, 5), (2, 6)), ((1, 3), (2, 3)), ((3, 0), (4, 0)), ((0, 6), (1, 6)), ((1, 7), (2, 7)), ((3, 2), (4, 2)), ((3, 7), (4, 7)), ((0, 1), (0, 2))}
    assert dr.adjacent_moves(4, 11) == {((2, 1), (3, 1)), ((3, 6), (3, 7)), ((0, 9), (1, 9)), ((2, 6), (3, 6)), ((0, 2), (1, 2)), ((2, 2), (3, 2)), ((1, 0), (2, 0)), ((1, 8), (2, 8)), ((1, 1), (2, 1)), ((1, 5), (2, 5)), ((3, 9), (3, 10)), ((0, 2), (0, 3)), ((0, 6), (0, 7)), ((2, 0), (2, 1)), ((2, 1), (2, 2)), ((2, 4), (2, 5)), ((2, 8), (2, 9)), ((1, 4), (1, 5)), ((2, 9), (2, 10)), ((3, 7), (3, 8)), ((1, 2), (2, 2)), ((0, 10), (1, 10)), ((0, 8), (0, 9)), ((2, 7), (3, 7)), ((3, 0), (3, 1)), ((3, 1), (3, 2)), ((0, 3), (1, 3)), ((1, 5), (1, 6)), ((1, 10), (2, 10)), ((0, 4), (0, 5)), ((2, 2), (2, 3)), ((2, 3), (2, 4)), ((0, 4), (1, 4)), ((2, 5), (3, 5)), ((2, 8), (3, 8)), ((2, 3), (3, 3)), ((1, 2), (1, 3)), ((3, 2), (3, 3)), ((0, 5), (0, 6)), ((0, 1), (1, 1)), ((1, 4), (2, 4)), ((2, 9), (3, 9)), ((1, 6), (1, 7)), ((2, 4), (3, 4)), ((1, 6), (2, 6)), ((1, 0), (1, 1)), ((0, 8), (1, 8)), ((1, 1), (1, 2)), ((3, 5), (3, 6)), ((0, 5), (1, 5)), ((3, 8), (3, 9)), ((2, 7), (2, 8)), ((3, 3), (3, 4)), ((0, 0), (1, 0)), ((0, 9), (0, 10)), ((0, 7), (1, 7)), ((1, 3), (1, 4)), ((1, 9), (1, 10)), ((3, 4), (3, 5)), ((2, 0), (3, 0)), ((0, 0), (0, 1)), ((0, 3), (0, 4)), ((2, 6), (2, 7)), ((2, 5), (2, 6)), ((1, 3), (2, 3)), ((0, 6), (1, 6)), ((2, 10), (3, 10)), ((0, 7), (0, 8)), ((1, 7), (2, 7)), ((1, 9), (2, 9)), ((1, 8), (1, 9)), ((0, 1), (0, 2)), ((1, 7), (1, 8))}
    assert dr.adjacent_moves(4, 11) == {((2, 1), (3, 1)), ((3, 6), (3, 7)), ((0, 9), (1, 9)), ((2, 6), (3, 6)), ((0, 2), (1, 2)), ((2, 2), (3, 2)), ((1, 0), (2, 0)), ((1, 8), (2, 8)), ((1, 1), (2, 1)), ((1, 5), (2, 5)), ((3, 9), (3, 10)), ((0, 2), (0, 3)), ((0, 6), (0, 7)), ((2, 0), (2, 1)), ((2, 1), (2, 2)), ((2, 4), (2, 5)), ((2, 8), (2, 9)), ((1, 4), (1, 5)), ((2, 9), (2, 10)), ((3, 7), (3, 8)), ((1, 2), (2, 2)), ((0, 10), (1, 10)), ((0, 8), (0, 9)), ((2, 7), (3, 7)), ((3, 0), (3, 1)), ((3, 1), (3, 2)), ((0, 3), (1, 3)), ((1, 5), (1, 6)), ((1, 10), (2, 10)), ((0, 4), (0, 5)), ((2, 2), (2, 3)), ((2, 3), (2, 4)), ((0, 4), (1, 4)), ((2, 5), (3, 5)), ((2, 8), (3, 8)), ((2, 3), (3, 3)), ((1, 2), (1, 3)), ((3, 2), (3, 3)), ((0, 5), (0, 6)), ((0, 1), (1, 1)), ((1, 4), (2, 4)), ((2, 9), (3, 9)), ((1, 6), (1, 7)), ((2, 4), (3, 4)), ((1, 6), (2, 6)), ((1, 0), (1, 1)), ((0, 8), (1, 8)), ((1, 1), (1, 2)), ((3, 5), (3, 6)), ((0, 5), (1, 5)), ((3, 8), (3, 9)), ((2, 7), (2, 8)), ((3, 3), (3, 4)), ((0, 0), (1, 0)), ((0, 9), (0, 10)), ((0, 7), (1, 7)), ((1, 3), (1, 4)), ((1, 9), (1, 10)), ((3, 4), (3, 5)), ((2, 0), (3, 0)), ((0, 0), (0, 1)), ((0, 3), (0, 4)), ((2, 6), (2, 7)), ((2, 5), (2, 6)), ((1, 3), (2, 3)), ((0, 6), (1, 6)), ((2, 10), (3, 10)), ((0, 7), (0, 8)), ((1, 7), (2, 7)), ((1, 9), (2, 9)), ((1, 8), (1, 9)), ((0, 1), (0, 2)), ((1, 7), (1, 8))}
    assert dr.adjacent_moves(4, 12) == {((2, 6), (3, 6)), ((0, 2), (1, 2)), ((1, 1), (2, 1)), ((1, 5), (2, 5)), ((0, 2), (0, 3)), ((0, 6), (0, 7)), ((1, 4), (1, 5)), ((0, 8), (0, 9)), ((2, 7), (3, 7)), ((2, 2), (2, 3)), ((2, 5), (3, 5)), ((2, 3), (3, 3)), ((1, 2), (1, 3)), ((3, 2), (3, 3)), ((0, 0), (1, 0)), ((3, 4), (3, 5)), ((2, 5), (2, 6)), ((0, 6), (1, 6)), ((3, 8), (3, 9)), ((2, 8), (2, 9)), ((2, 1), (3, 1)), ((2, 11), (3, 11)), ((1, 0), (2, 0)), ((1, 2), (2, 2)), ((0, 3), (1, 3)), ((1, 5), (1, 6)), ((2, 3), (2, 4)), ((2, 8), (3, 8)), ((0, 5), (0, 6)), ((0, 1), (1, 1)), ((1, 0), (1, 1)), ((1, 10), (1, 11)), ((3, 3), (3, 4)), ((0, 9), (0, 10)), ((1, 3), (1, 4)), ((1, 9), (1, 10)), ((0, 0), (0, 1)), ((2, 6), (2, 7)), ((3, 10), (3, 11)), ((1, 3), (2, 3)), ((2, 10), (3, 10)), ((1, 7), (2, 7)), ((1, 8), (1, 9)), ((0, 5), (1, 5)), ((1, 7), (1, 8)), ((2, 10), (2, 11)), ((3, 6), (3, 7)), ((2, 2), (3, 2)), ((1, 8), (2, 8)), ((0, 9), (1, 9)), ((2, 0), (2, 1)), ((2, 4), (2, 5)), ((3, 7), (3, 8)), ((3, 0), (3, 1)), ((0, 4), (0, 5)), ((0, 4), (1, 4)), ((1, 4), (2, 4)), ((1, 6), (1, 7)), ((2, 4), (3, 4)), ((1, 6), (2, 6)), ((1, 1), (1, 2)), ((2, 7), (2, 8)), ((0, 7), (1, 7)), ((2, 0), (3, 0)), ((0, 3), (0, 4)), ((1, 9), (2, 9)), ((0, 10), (0, 11)), ((1, 11), (2, 11)), ((3, 9), (3, 10)), ((2, 1), (2, 2)), ((2, 9), (2, 10)), ((0, 10), (1, 10)), ((3, 1), (3, 2)), ((1, 10), (2, 10)), ((2, 9), (3, 9)), ((0, 8), (1, 8)), ((0, 11), (1, 11)), ((3, 5), (3, 6)), ((0, 7), (0, 8)), ((0, 1), (0, 2))}
    assert dr.adjacent_moves(5, 10) == {((2, 6), (3, 6)), ((0, 2), (1, 2)), ((1, 1), (2, 1)), ((1, 5), (2, 5)), ((0, 2), (0, 3)), ((0, 6), (0, 7)), ((1, 4), (1, 5)), ((0, 8), (0, 9)), ((2, 7), (3, 7)), ((2, 2), (2, 3)), ((2, 5), (3, 5)), ((2, 3), (3, 3)), ((3, 3), (4, 3)), ((1, 2), (1, 3)), ((3, 2), (3, 3)), ((4, 4), (4, 5)), ((0, 0), (1, 0)), ((4, 6), (4, 7)), ((4, 7), (4, 8)), ((3, 4), (3, 5)), ((3, 4), (4, 4)), ((2, 5), (2, 6)), ((3, 9), (4, 9)), ((0, 6), (1, 6)), ((3, 8), (3, 9)), ((2, 8), (2, 9)), ((2, 1), (3, 1)), ((1, 0), (2, 0)), ((1, 2), (2, 2)), ((0, 3), (1, 3)), ((1, 5), (1, 6)), ((2, 3), (2, 4)), ((2, 8), (3, 8)), ((0, 5), (0, 6)), ((4, 5), (4, 6)), ((0, 1), (1, 1)), ((1, 0), (1, 1)), ((3, 3), (3, 4)), ((1, 3), (1, 4)), ((0, 0), (0, 1)), ((2, 6), (2, 7)), ((1, 3), (2, 3)), ((1, 7), (2, 7)), ((3, 7), (4, 7)), ((1, 8), (1, 9)), ((0, 5), (1, 5)), ((1, 7), (1, 8)), ((3, 6), (3, 7)), ((2, 2), (3, 2)), ((1, 8), (2, 8)), ((4, 3), (4, 4)), ((2, 0), (2, 1)), ((2, 4), (2, 5)), ((4, 2), (4, 3)), ((0, 9), (1, 9)), ((3, 7), (3, 8)), ((3, 5), (4, 5)), ((3, 0), (3, 1)), ((3, 6), (4, 6)), ((0, 4), (0, 5)), ((0, 4), (1, 4)), ((1, 4), (2, 4)), ((1, 6), (1, 7)), ((2, 4), (3, 4)), ((1, 6), (2, 6)), ((3, 1), (4, 1)), ((1, 1), (1, 2)), ((2, 7), (2, 8)), ((0, 7), (1, 7)), ((2, 0), (3, 0)), ((0, 3), (0, 4)), ((3, 0), (4, 0)), ((1, 9), (2, 9)), ((3, 8), (4, 8)), ((2, 1), (2, 2)), ((3, 1), (3, 2)), ((4, 0), (4, 1)), ((2, 9), (3, 9)), ((0, 8), (1, 8)), ((4, 8), (4, 9)), ((3, 5), (3, 6)), ((4, 1), (4, 2)), ((0, 7), (0, 8)), ((3, 2), (4, 2)), ((0, 1), (0, 2))}
    assert dr.adjacent_moves(4, 13) == {((2, 6), (3, 6)), ((0, 2), (1, 2)), ((1, 1), (2, 1)), ((1, 5), (2, 5)), ((0, 2), (0, 3)), ((0, 6), (0, 7)), ((1, 4), (1, 5)), ((0, 8), (0, 9)), ((2, 7), (3, 7)), ((2, 2), (2, 3)), ((2, 5), (3, 5)), ((2, 3), (3, 3)), ((1, 2), (1, 3)), ((3, 2), (3, 3)), ((0, 0), (1, 0)), ((3, 4), (3, 5)), ((3, 11), (3, 12)), ((2, 5), (2, 6)), ((0, 6), (1, 6)), ((1, 12), (2, 12)), ((3, 8), (3, 9)), ((2, 8), (2, 9)), ((2, 1), (3, 1)), ((2, 11), (3, 11)), ((1, 0), (2, 0)), ((1, 2), (2, 2)), ((0, 3), (1, 3)), ((1, 5), (1, 6)), ((2, 3), (2, 4)), ((2, 8), (3, 8)), ((0, 5), (0, 6)), ((0, 1), (1, 1)), ((1, 0), (1, 1)), ((1, 10), (1, 11)), ((3, 3), (3, 4)), ((0, 9), (0, 10)), ((1, 3), (1, 4)), ((1, 9), (1, 10)), ((0, 0), (0, 1)), ((0, 11), (0, 12)), ((2, 6), (2, 7)), ((3, 10), (3, 11)), ((1, 3), (2, 3)), ((2, 10), (3, 10)), ((1, 7), (2, 7)), ((1, 8), (1, 9)), ((0, 5), (1, 5)), ((1, 7), (1, 8)), ((2, 10), (2, 11)), ((3, 6), (3, 7)), ((2, 2), (3, 2)), ((1, 8), (2, 8)), ((0, 9), (1, 9)), ((2, 0), (2, 1)), ((2, 4), (2, 5)), ((3, 7), (3, 8)), ((3, 0), (3, 1)), ((0, 4), (0, 5)), ((0, 4), (1, 4)), ((1, 4), (2, 4)), ((1, 6), (1, 7)), ((2, 4), (3, 4)), ((1, 6), (2, 6)), ((1, 1), (1, 2)), ((2, 7), (2, 8)), ((0, 7), (1, 7)), ((2, 0), (3, 0)), ((0, 3), (0, 4)), ((1, 9), (2, 9)), ((0, 10), (0, 11)), ((1, 11), (2, 11)), ((3, 9), (3, 10)), ((2, 1), (2, 2)), ((2, 9), (2, 10)), ((0, 10), (1, 10)), ((2, 11), (2, 12)), ((3, 1), (3, 2)), ((1, 11), (1, 12)), ((1, 10), (2, 10)), ((2, 12), (3, 12)), ((2, 9), (3, 9)), ((0, 8), (1, 8)), ((0, 11), (1, 11)), ((3, 5), (3, 6)), ((0, 12), (1, 12)), ((0, 7), (0, 8)), ((0, 1), (0, 2))}
    assert dr.adjacent_moves(5, 11) == {((2, 6), (3, 6)), ((0, 2), (1, 2)), ((1, 1), (2, 1)), ((1, 5), (2, 5)), ((0, 2), (0, 3)), ((0, 6), (0, 7)), ((1, 4), (1, 5)), ((0, 8), (0, 9)), ((2, 7), (3, 7)), ((2, 2), (2, 3)), ((2, 5), (3, 5)), ((2, 3), (3, 3)), ((3, 3), (4, 3)), ((1, 2), (1, 3)), ((3, 2), (3, 3)), ((4, 4), (4, 5)), ((0, 0), (1, 0)), ((4, 6), (4, 7)), ((4, 7), (4, 8)), ((3, 4), (3, 5)), ((3, 4), (4, 4)), ((2, 5), (2, 6)), ((3, 9), (4, 9)), ((0, 6), (1, 6)), ((3, 8), (3, 9)), ((2, 8), (2, 9)), ((2, 1), (3, 1)), ((1, 0), (2, 0)), ((1, 2), (2, 2)), ((0, 3), (1, 3)), ((1, 5), (1, 6)), ((2, 3), (2, 4)), ((2, 8), (3, 8)), ((3, 10), (4, 10)), ((0, 5), (0, 6)), ((4, 5), (4, 6)), ((0, 1), (1, 1)), ((1, 0), (1, 1)), ((3, 3), (3, 4)), ((0, 9), (0, 10)), ((1, 3), (1, 4)), ((1, 9), (1, 10)), ((0, 0), (0, 1)), ((2, 6), (2, 7)), ((1, 3), (2, 3)), ((2, 10), (3, 10)), ((1, 7), (2, 7)), ((3, 7), (4, 7)), ((1, 8), (1, 9)), ((0, 5), (1, 5)), ((1, 7), (1, 8)), ((3, 6), (3, 7)), ((2, 2), (3, 2)), ((1, 8), (2, 8)), ((4, 3), (4, 4)), ((2, 0), (2, 1)), ((2, 4), (2, 5)), ((4, 2), (4, 3)), ((0, 9), (1, 9)), ((3, 7), (3, 8)), ((3, 5), (4, 5)), ((3, 0), (3, 1)), ((3, 6), (4, 6)), ((0, 4), (0, 5)), ((0, 4), (1, 4)), ((1, 4), (2, 4)), ((1, 6), (1, 7)), ((2, 4), (3, 4)), ((1, 6), (2, 6)), ((3, 1), (4, 1)), ((1, 1), (1, 2)), ((2, 7), (2, 8)), ((0, 7), (1, 7)), ((2, 0), (3, 0)), ((0, 3), (0, 4)), ((3, 0), (4, 0)), ((1, 9), (2, 9)), ((3, 8), (4, 8)), ((3, 9), (3, 10)), ((2, 1), (2, 2)), ((2, 9), (2, 10)), ((4, 9), (4, 10)), ((0, 10), (1, 10)), ((3, 1), (3, 2)), ((1, 10), (2, 10)), ((4, 0), (4, 1)), ((2, 9), (3, 9)), ((0, 8), (1, 8)), ((4, 8), (4, 9)), ((3, 5), (3, 6)), ((4, 1), (4, 2)), ((0, 7), (0, 8)), ((3, 2), (4, 2)), ((0, 1), (0, 2))}
    assert dr.adjacent_moves(5, 13) == {((2, 6), (3, 6)), ((3, 12), (4, 12)), ((0, 2), (1, 2)), ((1, 1), (2, 1)), ((1, 5), (2, 5)), ((0, 2), (0, 3)), ((0, 6), (0, 7)), ((1, 4), (1, 5)), ((0, 8), (0, 9)), ((2, 7), (3, 7)), ((2, 2), (2, 3)), ((2, 5), (3, 5)), ((2, 3), (3, 3)), ((3, 3), (4, 3)), ((1, 2), (1, 3)), ((3, 2), (3, 3)), ((4, 4), (4, 5)), ((0, 0), (1, 0)), ((4, 6), (4, 7)), ((4, 7), (4, 8)), ((3, 4), (3, 5)), ((3, 4), (4, 4)), ((3, 11), (3, 12)), ((2, 5), (2, 6)), ((3, 9), (4, 9)), ((0, 6), (1, 6)), ((1, 12), (2, 12)), ((3, 8), (3, 9)), ((2, 8), (2, 9)), ((2, 1), (3, 1)), ((2, 11), (3, 11)), ((1, 0), (2, 0)), ((1, 2), (2, 2)), ((0, 3), (1, 3)), ((1, 5), (1, 6)), ((2, 3), (2, 4)), ((2, 8), (3, 8)), ((3, 10), (4, 10)), ((0, 5), (0, 6)), ((4, 5), (4, 6)), ((0, 1), (1, 1)), ((1, 0), (1, 1)), ((1, 10), (1, 11)), ((3, 3), (3, 4)), ((0, 9), (0, 10)), ((1, 3), (1, 4)), ((1, 9), (1, 10)), ((0, 0), (0, 1)), ((0, 11), (0, 12)), ((2, 6), (2, 7)), ((3, 10), (3, 11)), ((1, 3), (2, 3)), ((2, 10), (3, 10)), ((1, 7), (2, 7)), ((3, 7), (4, 7)), ((1, 8), (1, 9)), ((0, 5), (1, 5)), ((1, 7), (1, 8)), ((2, 10), (2, 11)), ((3, 6), (3, 7)), ((2, 2), (3, 2)), ((1, 8), (2, 8)), ((4, 3), (4, 4)), ((2, 0), (2, 1)), ((2, 4), (2, 5)), ((4, 2), (4, 3)), ((0, 9), (1, 9)), ((3, 7), (3, 8)), ((3, 5), (4, 5)), ((3, 0), (3, 1)), ((3, 6), (4, 6)), ((0, 4), (0, 5)), ((0, 4), (1, 4)), ((1, 4), (2, 4)), ((1, 6), (1, 7)), ((2, 4), (3, 4)), ((1, 6), (2, 6)), ((3, 1), (4, 1)), ((1, 1), (1, 2)), ((2, 7), (2, 8)), ((3, 11), (4, 11)), ((0, 7), (1, 7)), ((2, 0), (3, 0)), ((0, 3), (0, 4)), ((3, 0), (4, 0)), ((1, 9), (2, 9)), ((4, 10), (4, 11)), ((0, 10), (0, 11)), ((3, 8), (4, 8)), ((1, 11), (2, 11)), ((3, 9), (3, 10)), ((2, 1), (2, 2)), ((2, 9), (2, 10)), ((4, 9), (4, 10)), ((0, 10), (1, 10)), ((2, 11), (2, 12)), ((3, 1), (3, 2)), ((1, 11), (1, 12)), ((1, 10), (2, 10)), ((2, 12), (3, 12)), ((4, 0), (4, 1)), ((2, 9), (3, 9)), ((0, 8), (1, 8)), ((0, 11), (1, 11)), ((4, 8), (4, 9)), ((3, 5), (3, 6)), ((0, 12), (1, 12)), ((4, 1), (4, 2)), ((0, 7), (0, 8)), ((3, 2), (4, 2)), ((4, 11), (4, 12)), ((0, 1), (0, 2))}
    assert dr.adjacent_moves(5, 14) == {((2, 6), (3, 6)), ((3, 12), (4, 12)), ((0, 2), (1, 2)), ((1, 1), (2, 1)), ((1, 5), (2, 5)), ((0, 2), (0, 3)), ((0, 6), (0, 7)), ((1, 4), (1, 5)), ((0, 8), (0, 9)), ((2, 7), (3, 7)), ((2, 2), (2, 3)), ((2, 5), (3, 5)), ((2, 3), (3, 3)), ((3, 3), (4, 3)), ((1, 2), (1, 3)), ((3, 2), (3, 3)), ((4, 4), (4, 5)), ((0, 0), (1, 0)), ((4, 6), (4, 7)), ((4, 7), (4, 8)), ((3, 4), (3, 5)), ((3, 4), (4, 4)), ((3, 11), (3, 12)), ((2, 5), (2, 6)), ((3, 9), (4, 9)), ((0, 6), (1, 6)), ((1, 12), (2, 12)), ((1, 13), (2, 13)), ((3, 8), (3, 9)), ((2, 12), (2, 13)), ((2, 8), (2, 9)), ((2, 1), (3, 1)), ((2, 11), (3, 11)), ((1, 0), (2, 0)), ((1, 2), (2, 2)), ((1, 12), (1, 13)), ((0, 3), (1, 3)), ((1, 5), (1, 6)), ((2, 3), (2, 4)), ((2, 8), (3, 8)), ((3, 10), (4, 10)), ((0, 5), (0, 6)), ((4, 5), (4, 6)), ((0, 1), (1, 1)), ((0, 13), (1, 13)), ((1, 0), (1, 1)), ((1, 10), (1, 11)), ((3, 3), (3, 4)), ((0, 9), (0, 10)), ((1, 3), (1, 4)), ((1, 9), (1, 10)), ((0, 0), (0, 1)), ((0, 11), (0, 12)), ((2, 6), (2, 7)), ((3, 10), (3, 11)), ((1, 3), (2, 3)), ((2, 10), (3, 10)), ((1, 7), (2, 7)), ((3, 7), (4, 7)), ((1, 8), (1, 9)), ((0, 5), (1, 5)), ((1, 7), (1, 8)), ((0, 12), (0, 13)), ((2, 10), (2, 11)), ((3, 6), (3, 7)), ((2, 2), (3, 2)), ((1, 8), (2, 8)), ((4, 3), (4, 4)), ((2, 0), (2, 1)), ((2, 4), (2, 5)), ((4, 2), (4, 3)), ((0, 9), (1, 9)), ((3, 7), (3, 8)), ((3, 12), (3, 13)), ((3, 5), (4, 5)), ((3, 0), (3, 1)), ((3, 6), (4, 6)), ((0, 4), (0, 5)), ((0, 4), (1, 4)), ((1, 4), (2, 4)), ((1, 6), (1, 7)), ((2, 4), (3, 4)), ((1, 6), (2, 6)), ((3, 1), (4, 1)), ((1, 1), (1, 2)), ((2, 7), (2, 8)), ((3, 11), (4, 11)), ((0, 7), (1, 7)), ((2, 0), (3, 0)), ((0, 3), (0, 4)), ((3, 0), (4, 0)), ((1, 9), (2, 9)), ((4, 10), (4, 11)), ((0, 10), (0, 11)), ((3, 8), (4, 8)), ((4, 12), (4, 13)), ((1, 11), (2, 11)), ((3, 9), (3, 10)), ((2, 1), (2, 2)), ((2, 9), (2, 10)), ((4, 9), (4, 10)), ((0, 10), (1, 10)), ((2, 11), (2, 12)), ((3, 1), (3, 2)), ((1, 11), (1, 12)), ((1, 10), (2, 10)), ((2, 12), (3, 12)), ((3, 13), (4, 13)), ((4, 0), (4, 1)), ((2, 9), (3, 9)), ((0, 8), (1, 8)), ((0, 11), (1, 11)), ((4, 8), (4, 9)), ((2, 13), (3, 13)), ((3, 5), (3, 6)), ((0, 12), (1, 12)), ((4, 1), (4, 2)), ((0, 7), (0, 8)), ((3, 2), (4, 2)), ((4, 11), (4, 12)), ((0, 1), (0, 2))}
    assert dr.adjacent_moves(6, 12) == {((2, 6), (3, 6)), ((0, 2), (1, 2)), ((1, 1), (2, 1)), ((1, 5), (2, 5)), ((0, 2), (0, 3)), ((0, 6), (0, 7)), ((1, 4), (1, 5)), ((5, 7), (5, 8)), ((0, 8), (0, 9)), ((2, 7), (3, 7)), ((5, 6), (5, 7)), ((4, 5), (5, 5)), ((4, 10), (5, 10)), ((2, 2), (2, 3)), ((2, 5), (3, 5)), ((2, 3), (3, 3)), ((3, 3), (4, 3)), ((1, 2), (1, 3)), ((3, 2), (3, 3)), ((5, 4), (5, 5)), ((4, 4), (4, 5)), ((0, 0), (1, 0)), ((4, 6), (4, 7)), ((4, 7), (4, 8)), ((3, 4), (3, 5)), ((5, 2), (5, 3)), ((3, 4), (4, 4)), ((2, 5), (2, 6)), ((3, 9), (4, 9)), ((0, 6), (1, 6)), ((4, 8), (5, 8)), ((3, 8), (3, 9)), ((2, 8), (2, 9)), ((4, 11), (5, 11)), ((4, 6), (5, 6)), ((2, 1), (3, 1)), ((2, 11), (3, 11)), ((4, 7), (5, 7)), ((1, 0), (2, 0)), ((4, 1), (5, 1)), ((1, 2), (2, 2)), ((0, 3), (1, 3)), ((1, 5), (1, 6)), ((2, 3), (2, 4)), ((2, 8), (3, 8)), ((3, 10), (4, 10)), ((0, 5), (0, 6)), ((4, 5), (4, 6)), ((5, 5), (5, 6)), ((0, 1), (1, 1)), ((1, 0), (1, 1)), ((1, 10), (1, 11)), ((3, 3), (3, 4)), ((0, 9), (0, 10)), ((4, 9), (5, 9)), ((1, 3), (1, 4)), ((1, 9), (1, 10)), ((0, 0), (0, 1)), ((2, 6), (2, 7)), ((3, 10), (3, 11)), ((4, 4), (5, 4)), ((1, 3), (2, 3)), ((2, 10), (3, 10)), ((1, 7), (2, 7)), ((3, 7), (4, 7)), ((1, 8), (1, 9)), ((0, 5), (1, 5)), ((5, 1), (5, 2)), ((1, 7), (1, 8)), ((2, 10), (2, 11)), ((3, 6), (3, 7)), ((5, 0), (5, 1)), ((2, 2), (3, 2)), ((1, 8), (2, 8)), ((4, 3), (4, 4)), ((2, 0), (2, 1)), ((2, 4), (2, 5)), ((4, 2), (4, 3)), ((0, 9), (1, 9)), ((3, 7), (3, 8)), ((5, 10), (5, 11)), ((3, 5), (4, 5)), ((3, 0), (3, 1)), ((3, 6), (4, 6)), ((0, 4), (0, 5)), ((0, 4), (1, 4)), ((4, 2), (5, 2)), ((1, 4), (2, 4)), ((1, 6), (1, 7)), ((5, 8), (5, 9)), ((2, 4), (3, 4)), ((1, 6), (2, 6)), ((3, 1), (4, 1)), ((1, 1), (1, 2)), ((2, 7), (2, 8)), ((3, 11), (4, 11)), ((0, 7), (1, 7)), ((2, 0), (3, 0)), ((0, 3), (0, 4)), ((3, 0), (4, 0)), ((5, 3), (5, 4)), ((1, 9), (2, 9)), ((4, 10), (4, 11)), ((0, 10), (0, 11)), ((3, 8), (4, 8)), ((1, 11), (2, 11)), ((4, 0), (5, 0)), ((3, 9), (3, 10)), ((2, 1), (2, 2)), ((2, 9), (2, 10)), ((4, 9), (4, 10)), ((0, 10), (1, 10)), ((3, 1), (3, 2)), ((1, 10), (2, 10)), ((4, 3), (5, 3)), ((4, 0), (4, 1)), ((2, 9), (3, 9)), ((0, 8), (1, 8)), ((0, 11), (1, 11)), ((4, 8), (4, 9)), ((3, 5), (3, 6)), ((4, 1), (4, 2)), ((5, 9), (5, 10)), ((0, 7), (0, 8)), ((3, 2), (4, 2)), ((0, 1), (0, 2))}
    assert dr.adjacent_moves(6, 14) == {((2, 6), (3, 6)), ((3, 12), (4, 12)), ((0, 2), (1, 2)), ((1, 1), (2, 1)), ((1, 5), (2, 5)), ((0, 2), (0, 3)), ((0, 6), (0, 7)), ((1, 4), (1, 5)), ((5, 7), (5, 8)), ((0, 8), (0, 9)), ((2, 7), (3, 7)), ((5, 6), (5, 7)), ((4, 5), (5, 5)), ((4, 10), (5, 10)), ((2, 2), (2, 3)), ((2, 5), (3, 5)), ((2, 3), (3, 3)), ((3, 3), (4, 3)), ((1, 2), (1, 3)), ((3, 2), (3, 3)), ((5, 4), (5, 5)), ((4, 4), (4, 5)), ((0, 0), (1, 0)), ((4, 6), (4, 7)), ((4, 7), (4, 8)), ((3, 4), (3, 5)), ((5, 2), (5, 3)), ((3, 4), (4, 4)), ((3, 11), (3, 12)), ((2, 5), (2, 6)), ((3, 9), (4, 9)), ((0, 6), (1, 6)), ((1, 12), (2, 12)), ((4, 8), (5, 8)), ((1, 13), (2, 13)), ((3, 8), (3, 9)), ((2, 12), (2, 13)), ((2, 8), (2, 9)), ((4, 6), (5, 6)), ((4, 11), (5, 11)), ((2, 1), (3, 1)), ((2, 11), (3, 11)), ((4, 7), (5, 7)), ((1, 0), (2, 0)), ((4, 1), (5, 1)), ((1, 2), (2, 2)), ((1, 12), (1, 13)), ((0, 3), (1, 3)), ((1, 5), (1, 6)), ((2, 3), (2, 4)), ((2, 8), (3, 8)), ((3, 10), (4, 10)), ((0, 5), (0, 6)), ((4, 5), (4, 6)), ((5, 5), (5, 6)), ((0, 1), (1, 1)), ((0, 13), (1, 13)), ((1, 0), (1, 1)), ((1, 10), (1, 11)), ((3, 3), (3, 4)), ((0, 9), (0, 10)), ((4, 9), (5, 9)), ((1, 3), (1, 4)), ((1, 9), (1, 10)), ((0, 0), (0, 1)), ((0, 11), (0, 12)), ((2, 6), (2, 7)), ((3, 10), (3, 11)), ((5, 12), (5, 13)), ((1, 3), (2, 3)), ((4, 4), (5, 4)), ((2, 10), (3, 10)), ((1, 7), (2, 7)), ((3, 7), (4, 7)), ((1, 8), (1, 9)), ((0, 5), (1, 5)), ((5, 1), (5, 2)), ((1, 7), (1, 8)), ((0, 12), (0, 13)), ((2, 10), (2, 11)), ((3, 6), (3, 7)), ((5, 0), (5, 1)), ((2, 2), (3, 2)), ((1, 8), (2, 8)), ((4, 3), (4, 4)), ((2, 0), (2, 1)), ((2, 4), (2, 5)), ((4, 2), (4, 3)), ((0, 9), (1, 9)), ((3, 7), (3, 8)), ((3, 12), (3, 13)), ((5, 10), (5, 11)), ((3, 5), (4, 5)), ((3, 0), (3, 1)), ((3, 6), (4, 6)), ((0, 4), (0, 5)), ((0, 4), (1, 4)), ((4, 2), (5, 2)), ((1, 4), (2, 4)), ((1, 6), (1, 7)), ((5, 8), (5, 9)), ((2, 4), (3, 4)), ((1, 6), (2, 6)), ((3, 1), (4, 1)), ((1, 1), (1, 2)), ((2, 7), (2, 8)), ((3, 11), (4, 11)), ((4, 12), (5, 12)), ((0, 7), (1, 7)), ((2, 0), (3, 0)), ((0, 3), (0, 4)), ((3, 0), (4, 0)), ((5, 3), (5, 4)), ((1, 9), (2, 9)), ((4, 10), (4, 11)), ((0, 10), (0, 11)), ((3, 8), (4, 8)), ((4, 12), (4, 13)), ((1, 11), (2, 11)), ((4, 0), (5, 0)), ((3, 9), (3, 10)), ((2, 1), (2, 2)), ((2, 9), (2, 10)), ((4, 9), (4, 10)), ((0, 10), (1, 10)), ((2, 11), (2, 12)), ((4, 13), (5, 13)), ((3, 1), (3, 2)), ((1, 11), (1, 12)), ((1, 10), (2, 10)), ((2, 12), (3, 12)), ((3, 13), (4, 13)), ((4, 3), (5, 3)), ((4, 0), (4, 1)), ((2, 9), (3, 9)), ((0, 8), (1, 8)), ((0, 11), (1, 11)), ((4, 8), (4, 9)), ((2, 13), (3, 13)), ((3, 5), (3, 6)), ((0, 12), (1, 12)), ((5, 11), (5, 12)), ((4, 1), (4, 2)), ((5, 9), (5, 10)), ((0, 7), (0, 8)), ((3, 2), (4, 2)), ((4, 11), (4, 12)), ((0, 1), (0, 2))}
    assert dr.adjacent_moves(6, 14) == {((2, 6), (3, 6)), ((3, 12), (4, 12)), ((0, 2), (1, 2)), ((1, 1), (2, 1)), ((1, 5), (2, 5)), ((0, 2), (0, 3)), ((0, 6), (0, 7)), ((1, 4), (1, 5)), ((5, 7), (5, 8)), ((0, 8), (0, 9)), ((2, 7), (3, 7)), ((5, 6), (5, 7)), ((4, 5), (5, 5)), ((4, 10), (5, 10)), ((2, 2), (2, 3)), ((2, 5), (3, 5)), ((2, 3), (3, 3)), ((3, 3), (4, 3)), ((1, 2), (1, 3)), ((3, 2), (3, 3)), ((5, 4), (5, 5)), ((4, 4), (4, 5)), ((0, 0), (1, 0)), ((4, 6), (4, 7)), ((4, 7), (4, 8)), ((3, 4), (3, 5)), ((5, 2), (5, 3)), ((3, 4), (4, 4)), ((3, 11), (3, 12)), ((2, 5), (2, 6)), ((3, 9), (4, 9)), ((0, 6), (1, 6)), ((1, 12), (2, 12)), ((4, 8), (5, 8)), ((1, 13), (2, 13)), ((3, 8), (3, 9)), ((2, 12), (2, 13)), ((2, 8), (2, 9)), ((4, 6), (5, 6)), ((4, 11), (5, 11)), ((2, 1), (3, 1)), ((2, 11), (3, 11)), ((4, 7), (5, 7)), ((1, 0), (2, 0)), ((4, 1), (5, 1)), ((1, 2), (2, 2)), ((1, 12), (1, 13)), ((0, 3), (1, 3)), ((1, 5), (1, 6)), ((2, 3), (2, 4)), ((2, 8), (3, 8)), ((3, 10), (4, 10)), ((0, 5), (0, 6)), ((4, 5), (4, 6)), ((5, 5), (5, 6)), ((0, 1), (1, 1)), ((0, 13), (1, 13)), ((1, 0), (1, 1)), ((1, 10), (1, 11)), ((3, 3), (3, 4)), ((0, 9), (0, 10)), ((4, 9), (5, 9)), ((1, 3), (1, 4)), ((1, 9), (1, 10)), ((0, 0), (0, 1)), ((0, 11), (0, 12)), ((2, 6), (2, 7)), ((3, 10), (3, 11)), ((5, 12), (5, 13)), ((1, 3), (2, 3)), ((4, 4), (5, 4)), ((2, 10), (3, 10)), ((1, 7), (2, 7)), ((3, 7), (4, 7)), ((1, 8), (1, 9)), ((0, 5), (1, 5)), ((5, 1), (5, 2)), ((1, 7), (1, 8)), ((0, 12), (0, 13)), ((2, 10), (2, 11)), ((3, 6), (3, 7)), ((5, 0), (5, 1)), ((2, 2), (3, 2)), ((1, 8), (2, 8)), ((4, 3), (4, 4)), ((2, 0), (2, 1)), ((2, 4), (2, 5)), ((4, 2), (4, 3)), ((0, 9), (1, 9)), ((3, 7), (3, 8)), ((3, 12), (3, 13)), ((5, 10), (5, 11)), ((3, 5), (4, 5)), ((3, 0), (3, 1)), ((3, 6), (4, 6)), ((0, 4), (0, 5)), ((0, 4), (1, 4)), ((4, 2), (5, 2)), ((1, 4), (2, 4)), ((1, 6), (1, 7)), ((5, 8), (5, 9)), ((2, 4), (3, 4)), ((1, 6), (2, 6)), ((3, 1), (4, 1)), ((1, 1), (1, 2)), ((2, 7), (2, 8)), ((3, 11), (4, 11)), ((4, 12), (5, 12)), ((0, 7), (1, 7)), ((2, 0), (3, 0)), ((0, 3), (0, 4)), ((3, 0), (4, 0)), ((5, 3), (5, 4)), ((1, 9), (2, 9)), ((4, 10), (4, 11)), ((0, 10), (0, 11)), ((3, 8), (4, 8)), ((4, 12), (4, 13)), ((1, 11), (2, 11)), ((4, 0), (5, 0)), ((3, 9), (3, 10)), ((2, 1), (2, 2)), ((2, 9), (2, 10)), ((4, 9), (4, 10)), ((0, 10), (1, 10)), ((2, 11), (2, 12)), ((4, 13), (5, 13)), ((3, 1), (3, 2)), ((1, 11), (1, 12)), ((1, 10), (2, 10)), ((2, 12), (3, 12)), ((3, 13), (4, 13)), ((4, 3), (5, 3)), ((4, 0), (4, 1)), ((2, 9), (3, 9)), ((0, 8), (1, 8)), ((0, 11), (1, 11)), ((4, 8), (4, 9)), ((2, 13), (3, 13)), ((3, 5), (3, 6)), ((0, 12), (1, 12)), ((5, 11), (5, 12)), ((4, 1), (4, 2)), ((5, 9), (5, 10)), ((0, 7), (0, 8)), ((3, 2), (4, 2)), ((4, 11), (4, 12)), ((0, 1), (0, 2))}

def test_possible_moves():
    # Test invariants:
    # 1) Calling `possible_moves` doesn't change the input dictionary.
    # 2) The output is a set of pairs of locations where each locations is
    #    of the form (row, column) and row is in (0, nrows)
    #    and column is in (0, ncolumns)
    # 3) Each output pair of locations is adjacent to each other.
    # 4) The output pairs of locations are ordered with the smallest coming first
    #    i.e. loc1 < loc2
    # 5) Making the move on a board rep will reduce the size of the board rep
    #    (some locations will become empty).
    nrows = 5
    ncols = 4
    for _ in range(NTESTS):
        nlocs = r.randrange(7, 15)
        nlabels = r.randrange(3, 7)
        labels = string.ascii_lowercase[:nlabels]
        d = make_random_dict1(nlocs, nrows, ncols, labels)
        d_copy = d.copy()
        poss  = dr.possible_moves(d, nrows, ncols)
        # 1.
        assert d == d_copy
        for p in poss:
            # 2
            assert type(p) is tuple
            assert len(p) == 2
            for loc in p:
                assert u.is_loc(loc)
                (row, col) = loc
                assert row >= 0
                assert row < nrows
                assert col >= 0
                assert col < ncols
            # 3
            loc0 = p[0]
            loc1 = p[1]
            assert ls.is_adjacent(loc0, loc1)
            # 4
            assert loc0 < loc1
            # 5
            # Make the move.
            d2 = dr.swap_locations(d, loc0, loc1)
            (d3, removed) = dr.remove_connected_groups(d2)
            if not len(d3) < len(d2):
                print()
                print(d2)
                print(d3)
            assert len(d3) < len(d2)
            assert len(removed) > 0

    # Generated tests:
    assert dr.possible_moves({(1, 2): 'a', (3, 1): 'c', (1, 0): 'e', (1, 3): 'c', (4, 3): 'c', (2, 2): 'a'}, 5, 4) == set()
    assert dr.possible_moves({(4, 3): 'd', (1, 1): 'e', (2, 2): 'a', (0, 0): 'f', (3, 1): 'a', (0, 1): 'c', (2, 0): 'a', (0, 2): 'c'}, 5, 4) == set()
    assert dr.possible_moves({(0, 1): 'b', (1, 1): 'c', (3, 2): 'a', (2, 2): 'c', (3, 3): 'b', (4, 2): 'b', (4, 0): 'c', (2, 0): 'b', (4, 1): 'b'}, 5, 4) == {((3, 2), (3, 3))}
    assert dr.possible_moves({(4, 2): 'b', (1, 1): 'd', (4, 3): 'c', (0, 2): 'a', (2, 2): 'd', (2, 1): 'b', (3, 2): 'b', (4, 0): 'b', (1, 3): 'a', (0, 0): 'a'}, 5, 4) == {((2, 1), (2, 2))}
    assert dr.possible_moves({(0, 1): 'c', (4, 2): 'c', (2, 1): 'b', (3, 1): 'b', (4, 1): 'a', (4, 0): 'b', (0, 0): 'c'}, 5, 4) == {((4, 0), (4, 1))}
    assert dr.possible_moves({(4, 0): 'b', (0, 2): 'e', (4, 2): 'e', (1, 2): 'e', (2, 0): 'b', (1, 1): 'd', (1, 3): 'b', (4, 3): 'c', (3, 3): 'd', (0, 1): 'b', (0, 3): 'b'}, 5, 4) == {((0, 1), (0, 2))}
    assert dr.possible_moves({(4, 1): 'c', (2, 1): 'c', (2, 0): 'c', (0, 0): 'e', (3, 1): 'd', (0, 2): 'a', (3, 3): 'b', (2, 3): 'c'}, 5, 4) == {((3, 1), (4, 1))}
    assert dr.possible_moves({(1, 1): 'c', (0, 2): 'c', (0, 3): 'a', (2, 3): 'a', (2, 2): 'c', (4, 1): 'd', (3, 2): 'a', (2, 1): 'd', (1, 0): 'c', (0, 1): 'b'}, 5, 4) == {((0, 1), (0, 2)), ((2, 1), (2, 2))}
    assert dr.possible_moves({(3, 2): 'e', (0, 2): 'e', (1, 1): 'e', (2, 2): 'e', (2, 0): 'd', (4, 0): 'c', (1, 0): 'f', (4, 2): 'a', (1, 2): 'c'}, 5, 4) == {((1, 1), (1, 2)), ((1, 2), (2, 2)), ((0, 2), (1, 2))}
    assert dr.possible_moves({(3, 1): 'c', (1, 1): 'b', (3, 3): 'a', (2, 2): 'b', (4, 2): 'c', (2, 0): 'b', (2, 1): 'a', (4, 0): 'c', (3, 0): 'b'}, 5, 4) == {((1, 1), (2, 1)), ((2, 1), (2, 2)), ((2, 0), (2, 1))}
    assert dr.possible_moves({(1, 3): 'a', (0, 3): 'a', (0, 1): 'a', (1, 1): 'c', (4, 0): 'b', (3, 1): 'b', (0, 2): 'c', (0, 0): 'c'}, 5, 4) == {((0, 0), (0, 1)), ((0, 1), (0, 2)), ((0, 1), (1, 1))}
    assert dr.possible_moves({(1, 0): 'b', (2, 0): 'a', (0, 0): 'b', (3, 1): 'a', (3, 2): 'b', (0, 1): 'b', (4, 2): 'b', (1, 3): 'a', (4, 0): 'c', (0, 3): 'b'}, 5, 4) == {((0, 0), (0, 1)), ((3, 1), (3, 2)), ((0, 3), (1, 3)), ((3, 2), (4, 2)), ((0, 0), (1, 0))}
    assert dr.possible_moves({(3, 1): 'd', (4, 2): 'c', (1, 1): 'd', (1, 3): 'b', (0, 2): 'b', (2, 2): 'd', (2, 0): 'a', (4, 3): 'a', (1, 2): 'd', (3, 2): 'e'}, 5, 4) == {((3, 1), (3, 2)), ((1, 1), (1, 2)), ((3, 2), (4, 2)), ((4, 2), (4, 3)), ((1, 2), (2, 2))}
    assert dr.possible_moves({(1, 2): 'b', (4, 2): 'c', (0, 0): 'a', (1, 1): 'b', (0, 3): 'a', (2, 1): 'a', (2, 0): 'c', (1, 0): 'b', (2, 3): 'b', (1, 3): 'd'}, 5, 4) == {((1, 0), (1, 1)), ((0, 3), (1, 3)), ((1, 3), (2, 3)), ((1, 1), (1, 2)), ((2, 0), (2, 1))}
    assert dr.possible_moves({(2, 0): 'a', (3, 3): 'f', (4, 3): 'f', (3, 2): 'e', (2, 3): 'f', (0, 0): 'a', (3, 0): 'a', (3, 1): 'e', (2, 2): 'd', (0, 2): 'c'}, 5, 4) == {((2, 0), (3, 0)), ((3, 1), (3, 2)), ((3, 0), (3, 1)), ((2, 3), (3, 3)), ((2, 2), (3, 2)), ((3, 3), (4, 3))}
    assert dr.possible_moves({(4, 1): 'b', (1, 0): 'c', (0, 2): 'a', (3, 2): 'c', (1, 1): 'a', (0, 3): 'a', (2, 1): 'c', (2, 3): 'c', (3, 0): 'c', (2, 0): 'c'}, 5, 4) == {((2, 0), (3, 0)), ((1, 0), (1, 1)), ((2, 0), (2, 1)), ((1, 0), (2, 0)), ((1, 1), (2, 1)), ((0, 2), (0, 3))}
    assert dr.possible_moves({(4, 3): 'c', (3, 0): 'c', (4, 2): 'c', (0, 1): 'c', (1, 0): 'a', (2, 2): 'a', (4, 0): 'c', (3, 1): 'c', (1, 1): 'c', (1, 2): 'c'}, 5, 4) == {((4, 2), (4, 3)), ((3, 0), (3, 1)), ((1, 0), (1, 1)), ((1, 1), (1, 2)), ((3, 0), (4, 0)), ((0, 1), (1, 1)), ((1, 2), (2, 2))}
    assert dr.possible_moves({(4, 3): 'a', (4, 2): 'b', (1, 1): 'a', (2, 2): 'b', (3, 2): 'b', (2, 0): 'a', (3, 0): 'b', (0, 2): 'b', (1, 2): 'b'}, 5, 4) == {((2, 0), (3, 0)), ((1, 1), (1, 2)), ((0, 2), (1, 2)), ((2, 2), (3, 2)), ((3, 2), (4, 2)), ((4, 2), (4, 3)), ((1, 2), (2, 2))}
    assert dr.possible_moves({(3, 1): 'd', (2, 2): 'e', (4, 2): 'f', (0, 1): 'b', (0, 2): 'c', (4, 1): 'b', (3, 2): 'b', (2, 3): 'e', (3, 3): 'e', (4, 0): 'f'}, 5, 4) == {((4, 0), (4, 1)), ((3, 1), (3, 2)), ((3, 1), (4, 1)), ((0, 1), (0, 2)), ((2, 2), (3, 2)), ((2, 2), (2, 3)), ((3, 2), (4, 2)), ((2, 3), (3, 3)), ((3, 2), (3, 3)), ((4, 1), (4, 2))}
    assert dr.possible_moves({(1, 1): 'c', (0, 3): 'c', (0, 2): 'c', (2, 1): 'c', (2, 0): 'c', (1, 2): 'a', (1, 3): 'c', (0, 1): 'b', (3, 0): 'b', (4, 3): 'b'}, 5, 4) == {((0, 1), (1, 1)), ((2, 0), (3, 0)), ((0, 3), (1, 3)), ((0, 1), (0, 2)), ((0, 2), (1, 2)), ((1, 1), (1, 2)), ((2, 0), (2, 1)), ((1, 1), (2, 1)), ((1, 2), (1, 3)), ((0, 2), (0, 3))}
    assert dr.possible_moves({(1, 1): 'c', (0, 3): 'c', (0, 2): 'c', (2, 1): 'c', (2, 0): 'c', (1, 2): 'a', (1, 3): 'c', (0, 1): 'b', (3, 0): 'b', (4, 3): 'b'}, 5, 4) == {((0, 1), (1, 1)), ((2, 0), (3, 0)), ((0, 3), (1, 3)), ((0, 1), (0, 2)), ((0, 2), (1, 2)), ((1, 1), (1, 2)), ((2, 0), (2, 1)), ((1, 1), (2, 1)), ((1, 2), (1, 3)), ((0, 2), (0, 3))}


# ---------------------------------------------------------------------- 
# Entry point.
# ---------------------------------------------------------------------- 

if __name__ == '__main__':
    reset_test_counts()

    tests = [
      test_invert_rep,
      test_revert_rep,
      test_swap_locations,
      test_remove_connected_groups,
      test_adjacent_moves,
      test_possible_moves
    ]

    print()
    for test in tests:
        run_test(test)
    print()
    wrap_up()

